
sd-driver clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006204  08006204  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800620c  0800620c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000088  0800629c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800629c  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9d1  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c0  00000000  00000000  0002fa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  00032800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002749b  00000000  00000000  000330b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcec  00000000  00000000  0005a54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eafa3  00000000  00000000  00068237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001531da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a00  00000000  00000000  00153230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	08005f28 	.word	0x08005f28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	08005f28 	.word	0x08005f28

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005e8:	b40f      	push	{r0, r1, r2, r3}
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <myprintf+0x34>)
 8000600:	f005 f876 	bl	80056f0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <myprintf+0x34>)
 8000606:	f7ff fe1b 	bl	8000240 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	607b      	str	r3, [r7, #4]
  //HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);

}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000618:	b004      	add	sp, #16
 800061a:	4770      	bx	lr
 800061c:	200000a4 	.word	0x200000a4

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fb01 	bl	8000c2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f8fe 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f996 	bl	8000960 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000634:	f000 f956 	bl	80008e4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000638:	f001 febc 	bl	80023b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800063c:	486b      	ldr	r0, [pc, #428]	; (80007ec <main+0x1cc>)
 800063e:	f7ff ffd3 	bl	80005e8 <myprintf>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f000 fb4f 	bl	8000ce8 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "/", 1); //1=mount now
 800064a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800064e:	2201      	movs	r2, #1
 8000650:	4967      	ldr	r1, [pc, #412]	; (80007f0 <main+0x1d0>)
 8000652:	4618      	mov	r0, r3
 8000654:	f004 f940 	bl	80048d8 <f_mount>
 8000658:	4603      	mov	r3, r0
 800065a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 800065e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <main+0x54>
	myprintf("f_mount error (%i)\r\n", fres);
 8000666:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800066a:	4619      	mov	r1, r3
 800066c:	4861      	ldr	r0, [pc, #388]	; (80007f4 <main+0x1d4>)
 800066e:	f7ff ffbb 	bl	80005e8 <myprintf>
	while(1);
 8000672:	e7fe      	b.n	8000672 <main+0x52>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000674:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800067c:	4619      	mov	r1, r3
 800067e:	485e      	ldr	r0, [pc, #376]	; (80007f8 <main+0x1d8>)
 8000680:	f004 fe8a 	bl	8005398 <f_getfree>
 8000684:	4603      	mov	r3, r0
 8000686:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 800068a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <main+0x80>
	myprintf("f_getfree error (%i)\r\n", fres);
 8000692:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000696:	4619      	mov	r1, r3
 8000698:	4858      	ldr	r0, [pc, #352]	; (80007fc <main+0x1dc>)
 800069a:	f7ff ffa5 	bl	80005e8 <myprintf>
	while(1);
 800069e:	e7fe      	b.n	800069e <main+0x7e>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80006a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	3b02      	subs	r3, #2
 80006aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	8952      	ldrh	r2, [r2, #10]
 80006b2:	fb02 f303 	mul.w	r3, r2, r3
 80006b6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
  free_sectors = free_clusters * getFreeFs->csize;
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	895b      	ldrh	r3, [r3, #10]
 80006c2:	461a      	mov	r2, r3
 80006c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	fb03 f302 	mul.w	r3, r3, r2
 80006ce:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006d2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006d6:	0859      	lsrs	r1, r3, #1
 80006d8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80006dc:	085b      	lsrs	r3, r3, #1
 80006de:	461a      	mov	r2, r3
 80006e0:	4847      	ldr	r0, [pc, #284]	; (8000800 <main+0x1e0>)
 80006e2:	f7ff ff81 	bl	80005e8 <myprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80006e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ea:	2201      	movs	r2, #1
 80006ec:	4945      	ldr	r1, [pc, #276]	; (8000804 <main+0x1e4>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f938 	bl	8004964 <f_open>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 80006fa:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <main+0xea>
	myprintf("f_open error (%i)\r\n");
 8000702:	4841      	ldr	r0, [pc, #260]	; (8000808 <main+0x1e8>)
 8000704:	f7ff ff70 	bl	80005e8 <myprintf>
	while(1);
 8000708:	e7fe      	b.n	8000708 <main+0xe8>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <main+0x1ec>)
 800070c:	f7ff ff6c 	bl	80005e8 <myprintf>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000710:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	211e      	movs	r1, #30
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fef1 	bl	8005502 <f_gets>
 8000720:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
  if(rres != 0) {
 8000724:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8000728:	2b00      	cmp	r3, #0
 800072a:	d006      	beq.n	800073a <main+0x11a>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4619      	mov	r1, r3
 8000732:	4837      	ldr	r0, [pc, #220]	; (8000810 <main+0x1f0>)
 8000734:	f7ff ff58 	bl	80005e8 <myprintf>
 8000738:	e005      	b.n	8000746 <main+0x126>
  } else {
	myprintf("f_gets error (%i)\r\n", fres);
 800073a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800073e:	4619      	mov	r1, r3
 8000740:	4834      	ldr	r0, [pc, #208]	; (8000814 <main+0x1f4>)
 8000742:	f7ff ff51 	bl	80005e8 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800074a:	4618      	mov	r0, r3
 800074c:	f004 fdfa 	bl	8005344 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000754:	221a      	movs	r2, #26
 8000756:	4930      	ldr	r1, [pc, #192]	; (8000818 <main+0x1f8>)
 8000758:	4618      	mov	r0, r3
 800075a:	f004 f903 	bl	8004964 <f_open>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 8000764:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000768:	2b00      	cmp	r3, #0
 800076a:	d103      	bne.n	8000774 <main+0x154>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 800076c:	482b      	ldr	r0, [pc, #172]	; (800081c <main+0x1fc>)
 800076e:	f7ff ff3b 	bl	80005e8 <myprintf>
 8000772:	e005      	b.n	8000780 <main+0x160>
  } else {
	myprintf("f_open error (%i)\r\n", fres);
 8000774:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000778:	4619      	mov	r1, r3
 800077a:	4823      	ldr	r0, [pc, #140]	; (8000808 <main+0x1e8>)
 800077c:	f7ff ff34 	bl	80005e8 <myprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <main+0x200>)
 8000786:	461c      	mov	r4, r3
 8000788:	4615      	mov	r5, r2
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	8022      	strh	r2, [r4, #0]
 8000794:	3402      	adds	r4, #2
 8000796:	0c1b      	lsrs	r3, r3, #16
 8000798:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	f107 0108 	add.w	r1, r7, #8
 80007a0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80007a4:	2213      	movs	r2, #19
 80007a6:	f004 fbda 	bl	8004f5e <f_write>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 80007b0:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d106      	bne.n	80007c6 <main+0x1a6>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	4819      	ldr	r0, [pc, #100]	; (8000824 <main+0x204>)
 80007c0:	f7ff ff12 	bl	80005e8 <myprintf>
 80007c4:	e002      	b.n	80007cc <main+0x1ac>
  } else {
	myprintf("f_write error (%i)\r\n");
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <main+0x208>)
 80007c8:	f7ff ff0e 	bl	80005e8 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 80007cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 fdb7 	bl	8005344 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	4907      	ldr	r1, [pc, #28]	; (80007f8 <main+0x1d8>)
 80007da:	2000      	movs	r0, #0
 80007dc:	f004 f87c 	bl	80048d8 <f_mount>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      //Blink the LED every second
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f000 fa80 	bl	8000ce8 <HAL_Delay>
 80007e8:	e7fa      	b.n	80007e0 <main+0x1c0>
 80007ea:	bf00      	nop
 80007ec:	08005f40 	.word	0x08005f40
 80007f0:	08005f60 	.word	0x08005f60
 80007f4:	08005f64 	.word	0x08005f64
 80007f8:	08005f7c 	.word	0x08005f7c
 80007fc:	08005f80 	.word	0x08005f80
 8000800:	08005f98 	.word	0x08005f98
 8000804:	08005fe0 	.word	0x08005fe0
 8000808:	08005fec 	.word	0x08005fec
 800080c:	08006000 	.word	0x08006000
 8000810:	08006030 	.word	0x08006030
 8000814:	0800605c 	.word	0x0800605c
 8000818:	08006070 	.word	0x08006070
 800081c:	0800607c 	.word	0x0800607c
 8000820:	080060ac 	.word	0x080060ac
 8000824:	080060c0 	.word	0x080060c0
 8000828:	080060e4 	.word	0x080060e4

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2234      	movs	r2, #52	; 0x34
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f004 ff24 	bl	8005688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <SystemClock_Config+0xb0>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <SystemClock_Config+0xb0>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <SystemClock_Config+0xb0>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <SystemClock_Config+0xb4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <SystemClock_Config+0xb4>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <SystemClock_Config+0xb4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fcf5 	bl	8001288 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008a4:	f000 f89c 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 ff8e 	bl	80017e4 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ce:	f000 f887 	bl	80009e0 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI2_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <MX_SPI2_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_SPI2_Init+0x74>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI2_Init+0x74>)
 80008fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000902:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SPI2_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI2_Init+0x74>)
 8000912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000916:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI2_Init+0x74>)
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI2_Init+0x74>)
 8000932:	2207      	movs	r2, #7
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_SPI2_Init+0x74>)
 8000944:	f001 f8f0 	bl	8001b28 <HAL_SPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 f847 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001e8 	.word	0x200001e8
 800095c:	40003800 	.word	0x40003800

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_GPIO_Init+0x78>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_GPIO_Init+0x78>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_GPIO_Init+0x78>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_GPIO_Init+0x78>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <MX_GPIO_Init+0x78>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_GPIO_Init+0x78>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <MX_GPIO_Init+0x7c>)
 80009ae:	f000 fc51 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0x7c>)
 80009cc:	f000 fa96 	bl	8000efc <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_MspInit+0x44>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_MspInit+0x44>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_MspInit+0x44>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x44>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x44>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x44>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <HAL_SPI_MspInit+0xb4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d144      	bne.n	8000ae0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_SPI_MspInit+0xb8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <HAL_SPI_MspInit+0xbc>)
 8000aba:	f000 fa1f 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_SPI_MspInit+0xc0>)
 8000adc:	f000 fa0e 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40003800 	.word	0x40003800
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020400 	.word	0x40020400

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f8b0 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f004 fd5a 	bl	8005634 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20080000 	.word	0x20080000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	200001a4 	.word	0x200001a4
 8000bb4:	200006d0 	.word	0x200006d0

08000bb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ffd7 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f004 fd19 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fd07 	bl	8000620 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c20:	08006214 	.word	0x08006214
  ldr r2, =_sbss
 8000c24:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c28:	200006d0 	.word	0x200006d0

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>

08000c2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f92e 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c38:	200f      	movs	r0, #15
 8000c3a:	f000 f805 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3e:	f7ff fed5 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f93b 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f911 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	2000024c 	.word	0x2000024c

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000024c 	.word	0x2000024c

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <__NVIC_SetPriorityGrouping+0x40>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x40>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	05fa0000 	.word	0x05fa0000

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff47 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff5c 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff8e 	bl	8000de8 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffb0 	bl	8000e50 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e175      	b.n	8001208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8164 	bne.w	8001202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_GPIO_Init+0x56>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d017      	beq.n	8000ff0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80be 	beq.w	8001202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <HAL_GPIO_Init+0x324>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a65      	ldr	r2, [pc, #404]	; (8001220 <HAL_GPIO_Init+0x324>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <HAL_GPIO_Init+0x324>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800109e:	4a61      	ldr	r2, [pc, #388]	; (8001224 <HAL_GPIO_Init+0x328>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a58      	ldr	r2, [pc, #352]	; (8001228 <HAL_GPIO_Init+0x32c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d037      	beq.n	800113a <HAL_GPIO_Init+0x23e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a57      	ldr	r2, [pc, #348]	; (800122c <HAL_GPIO_Init+0x330>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d031      	beq.n	8001136 <HAL_GPIO_Init+0x23a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a56      	ldr	r2, [pc, #344]	; (8001230 <HAL_GPIO_Init+0x334>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_GPIO_Init+0x236>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a55      	ldr	r2, [pc, #340]	; (8001234 <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x232>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a54      	ldr	r2, [pc, #336]	; (8001238 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x22e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a53      	ldr	r2, [pc, #332]	; (800123c <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x22a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a52      	ldr	r2, [pc, #328]	; (8001240 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x226>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a51      	ldr	r2, [pc, #324]	; (8001244 <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x222>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a50      	ldr	r2, [pc, #320]	; (8001248 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x21e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4f      	ldr	r2, [pc, #316]	; (800124c <HAL_GPIO_Init+0x350>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x21a>
 8001112:	2309      	movs	r3, #9
 8001114:	e012      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001116:	230a      	movs	r3, #10
 8001118:	e010      	b.n	800113c <HAL_GPIO_Init+0x240>
 800111a:	2308      	movs	r3, #8
 800111c:	e00e      	b.n	800113c <HAL_GPIO_Init+0x240>
 800111e:	2307      	movs	r3, #7
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001122:	2306      	movs	r3, #6
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x240>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x240>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x240>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <HAL_GPIO_Init+0x328>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_GPIO_Init+0x354>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a34      	ldr	r2, [pc, #208]	; (8001250 <HAL_GPIO_Init+0x354>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <HAL_GPIO_Init+0x354>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a29      	ldr	r2, [pc, #164]	; (8001250 <HAL_GPIO_Init+0x354>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <HAL_GPIO_Init+0x354>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_GPIO_Init+0x354>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_GPIO_Init+0x354>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_GPIO_Init+0x354>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae86 	bls.w	8000f1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40021400 	.word	0x40021400
 8001240:	40021800 	.word	0x40021800
 8001244:	40021c00 	.word	0x40021c00
 8001248:	40022000 	.word	0x40022000
 800124c:	40022400 	.word	0x40022400
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e29b      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8087 	beq.w	80013ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ac:	4b96      	ldr	r3, [pc, #600]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d00c      	beq.n	80012d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b8:	4b93      	ldr	r3, [pc, #588]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d112      	bne.n	80012ea <HAL_RCC_OscConfig+0x62>
 80012c4:	4b90      	ldr	r3, [pc, #576]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d0:	d10b      	bne.n	80012ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d2:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x130>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d168      	bne.n	80013b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e275      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x7a>
 80012f4:	4b84      	ldr	r3, [pc, #528]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a83      	ldr	r2, [pc, #524]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e02e      	b.n	8001360 <HAL_RCC_OscConfig+0xd8>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x9c>
 800130a:	4b7f      	ldr	r3, [pc, #508]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a7e      	ldr	r2, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7b      	ldr	r2, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800131c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0xd8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0xc0>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0xd8>
 8001348:	4b6f      	ldr	r3, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a6e      	ldr	r2, [pc, #440]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b6c      	ldr	r3, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6b      	ldr	r2, [pc, #428]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fcb2 	bl	8000cd0 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fcae 	bl	8000cd0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e229      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b61      	ldr	r3, [pc, #388]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fc9e 	bl	8000cd0 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fc9a 	bl	8000cd0 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e215      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x110>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d069      	beq.n	800149a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c6:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d11c      	bne.n	8001418 <HAL_RCC_OscConfig+0x190>
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d116      	bne.n	8001418 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x17a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e1e9      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	493d      	ldr	r1, [pc, #244]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	e040      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d023      	beq.n	8001468 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a38      	ldr	r2, [pc, #224]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fc50 	bl	8000cd0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc4c 	bl	8000cd0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1c7      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4929      	ldr	r1, [pc, #164]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
 8001466:	e018      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc2c 	bl	8000cd0 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fc28 	bl	8000cd0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1a3      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d038      	beq.n	8001518 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d019      	beq.n	80014e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80014b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b2:	4a15      	ldr	r2, [pc, #84]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff fc09 	bl	8000cd0 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc05 	bl	8000cd0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e180      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x23a>
 80014e0:	e01a      	b.n	8001518 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fbef 	bl	8000cd0 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbeb 	bl	8000cd0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d903      	bls.n	800150c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e166      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
 8001508:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b92      	ldr	r3, [pc, #584]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ee      	bne.n	80014f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a4 	beq.w	800166e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b8c      	ldr	r3, [pc, #560]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b89      	ldr	r3, [pc, #548]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a88      	ldr	r2, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b86      	ldr	r3, [pc, #536]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154e:	4b83      	ldr	r3, [pc, #524]	; (800175c <HAL_RCC_OscConfig+0x4d4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d118      	bne.n	800158c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800155a:	4b80      	ldr	r3, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x4d4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a7f      	ldr	r2, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x4d4>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbb3 	bl	8000cd0 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fbaf 	bl	8000cd0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b64      	cmp	r3, #100	; 0x64
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e12a      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x4d4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x31a>
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a6f      	ldr	r2, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	e02d      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x33c>
 80015aa:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a6a      	ldr	r2, [pc, #424]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a67      	ldr	r2, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	e01c      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x35e>
 80015cc:	4b62      	ldr	r3, [pc, #392]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a61      	ldr	r2, [pc, #388]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a5e      	ldr	r2, [pc, #376]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	e00b      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
 80015e6:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	4b59      	ldr	r3, [pc, #356]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d015      	beq.n	8001632 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff fb63 	bl	8000cd0 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff fb5f 	bl	8000cd0 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e0d8      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0ee      	beq.n	800160e <HAL_RCC_OscConfig+0x386>
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7ff fb4d 	bl	8000cd0 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff fb49 	bl	8000cd0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0c2      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ee      	bne.n	800163a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d105      	bne.n	800166e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a3c      	ldr	r2, [pc, #240]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80ae 	beq.w	80017d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001678:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d06d      	beq.n	8001760 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d14b      	bne.n	8001724 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb1a 	bl	8000cd0 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff fb16 	bl	8000cd0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e091      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	4b29      	ldr	r3, [pc, #164]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	019b      	lsls	r3, r3, #6
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	3b01      	subs	r3, #1
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	071b      	lsls	r3, r3, #28
 80016ea:	491b      	ldr	r1, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fae8 	bl	8000cd0 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fae4 	bl	8000cd0 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e05f      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x47c>
 8001722:	e057      	b.n	80017d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 800172a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800172e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff face 	bl	8000cd0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff faca 	bl	8000cd0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e045      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x4b0>
 8001756:	e03d      	b.n	80017d4 <HAL_RCC_OscConfig+0x54c>
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_RCC_OscConfig+0x558>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d030      	beq.n	80017d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d129      	bne.n	80017d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d122      	bne.n	80017d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001796:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001798:	4293      	cmp	r3, r2
 800179a:	d119      	bne.n	80017d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d10f      	bne.n	80017d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0d0      	b.n	800199e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d910      	bls.n	800182c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 020f 	bic.w	r2, r3, #15
 8001812:	4965      	ldr	r1, [pc, #404]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b8      	b.n	800199e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 800184a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800184e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001866:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	494d      	ldr	r1, [pc, #308]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d040      	beq.n	8001908 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e07f      	b.n	800199e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e073      	b.n	800199e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06b      	b.n	800199e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4936      	ldr	r1, [pc, #216]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d8:	f7ff f9fa 	bl	8000cd0 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f9f6 	bl	8000cd0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e053      	b.n	800199e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d210      	bcs.n	8001938 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 020f 	bic.w	r2, r3, #15
 800191e:	4922      	ldr	r1, [pc, #136]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e032      	b.n	800199e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4916      	ldr	r1, [pc, #88]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	490e      	ldr	r1, [pc, #56]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001976:	f000 f821 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	490a      	ldr	r1, [pc, #40]	; (80019b0 <HAL_RCC_ClockConfig+0x1cc>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1d4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f956 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08006140 	.word	0x08006140
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019c2:	2100      	movs	r1, #0
 80019c4:	6079      	str	r1, [r7, #4]
 80019c6:	2100      	movs	r1, #0
 80019c8:	60f9      	str	r1, [r7, #12]
 80019ca:	2100      	movs	r1, #0
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019ce:	2100      	movs	r1, #0
 80019d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d2:	4952      	ldr	r1, [pc, #328]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x160>)
 80019d4:	6889      	ldr	r1, [r1, #8]
 80019d6:	f001 010c 	and.w	r1, r1, #12
 80019da:	2908      	cmp	r1, #8
 80019dc:	d00d      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x3e>
 80019de:	2908      	cmp	r1, #8
 80019e0:	f200 8094 	bhi.w	8001b0c <HAL_RCC_GetSysClockFreq+0x150>
 80019e4:	2900      	cmp	r1, #0
 80019e6:	d002      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x32>
 80019e8:	2904      	cmp	r1, #4
 80019ea:	d003      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x38>
 80019ec:	e08e      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x164>)
 80019f0:	60bb      	str	r3, [r7, #8]
      break;
 80019f2:	e08e      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x168>)
 80019f6:	60bb      	str	r3, [r7, #8]
      break;
 80019f8:	e08b      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fa:	4948      	ldr	r1, [pc, #288]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x160>)
 80019fc:	6849      	ldr	r1, [r1, #4]
 80019fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001a02:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a04:	4945      	ldr	r1, [pc, #276]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a06:	6849      	ldr	r1, [r1, #4]
 8001a08:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d024      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a10:	4942      	ldr	r1, [pc, #264]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a12:	6849      	ldr	r1, [r1, #4]
 8001a14:	0989      	lsrs	r1, r1, #6
 8001a16:	4608      	mov	r0, r1
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a20:	f04f 0500 	mov.w	r5, #0
 8001a24:	ea00 0204 	and.w	r2, r0, r4
 8001a28:	ea01 0305 	and.w	r3, r1, r5
 8001a2c:	493d      	ldr	r1, [pc, #244]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a2e:	fb01 f003 	mul.w	r0, r1, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	fb01 f102 	mul.w	r1, r1, r2
 8001a38:	1844      	adds	r4, r0, r1
 8001a3a:	493a      	ldr	r1, [pc, #232]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a3c:	fba2 0101 	umull	r0, r1, r2, r1
 8001a40:	1863      	adds	r3, r4, r1
 8001a42:	4619      	mov	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f7fe fc50 	bl	80002f0 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e04a      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	461a      	mov	r2, r3
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	ea02 0400 	and.w	r4, r2, r0
 8001a72:	ea03 0501 	and.w	r5, r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	014b      	lsls	r3, r1, #5
 8001a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a88:	0142      	lsls	r2, r0, #5
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	1b00      	subs	r0, r0, r4
 8001a90:	eb61 0105 	sbc.w	r1, r1, r5
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	018b      	lsls	r3, r1, #6
 8001a9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aa2:	0182      	lsls	r2, r0, #6
 8001aa4:	1a12      	subs	r2, r2, r0
 8001aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ab8:	00d0      	lsls	r0, r2, #3
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	1912      	adds	r2, r2, r4
 8001ac0:	eb45 0303 	adc.w	r3, r5, r3
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	0299      	lsls	r1, r3, #10
 8001ace:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ad2:	0290      	lsls	r0, r2, #10
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	f7fe fc04 	bl	80002f0 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	3301      	adds	r3, #1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	60bb      	str	r3, [r7, #8]
      break;
 8001b0a:	e002      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b0e:	60bb      	str	r3, [r7, #8]
      break;
 8001b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b12:	68bb      	ldr	r3, [r7, #8]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	017d7840 	.word	0x017d7840

08001b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e09d      	b.n	8001c76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b4a:	d009      	beq.n	8001b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
 8001b52:	e005      	b.n	8001b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe ff5a 	bl	8000a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ba0:	d902      	bls.n	8001ba8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e002      	b.n	8001bae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001bb6:	d007      	beq.n	8001bc8 <HAL_SPI_Init+0xa0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bc0:	d002      	beq.n	8001bc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	ea42 0103 	orr.w	r1, r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	0c1b      	lsrs	r3, r3, #16
 8001c24:	f003 0204 	and.w	r2, r3, #4
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c44:	ea42 0103 	orr.w	r1, r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b08a      	sub	sp, #40	; 0x28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_SPI_TransmitReceive+0x26>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e1fb      	b.n	800209c <HAL_SPI_TransmitReceive+0x41e>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cac:	f7ff f810 	bl	8000cd0 <HAL_GetTick>
 8001cb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001cb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cc8:	7efb      	ldrb	r3, [r7, #27]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d00e      	beq.n	8001cec <HAL_SPI_TransmitReceive+0x6e>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd4:	d106      	bne.n	8001ce4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <HAL_SPI_TransmitReceive+0x66>
 8001cde:	7efb      	ldrb	r3, [r7, #27]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d003      	beq.n	8001cec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001cea:	e1cd      	b.n	8002088 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_SPI_TransmitReceive+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_SPI_TransmitReceive+0x80>
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d04:	e1c0      	b.n	8002088 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d003      	beq.n	8001d1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2205      	movs	r2, #5
 8001d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	887a      	ldrh	r2, [r7, #2]
 8001d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	887a      	ldrh	r2, [r7, #2]
 8001d32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d5c:	d802      	bhi.n	8001d64 <HAL_SPI_TransmitReceive+0xe6>
 8001d5e:	8a3b      	ldrh	r3, [r7, #16]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d908      	bls.n	8001d76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	e007      	b.n	8001d86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b40      	cmp	r3, #64	; 0x40
 8001d92:	d007      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dac:	d97c      	bls.n	8001ea8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_SPI_TransmitReceive+0x13e>
 8001db6:	8a7b      	ldrh	r3, [r7, #18]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d169      	bne.n	8001e90 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	1c9a      	adds	r2, r3, #2
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001de0:	e056      	b.n	8001e90 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d11b      	bne.n	8001e28 <HAL_SPI_TransmitReceive+0x1aa>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_SPI_TransmitReceive+0x1aa>
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d113      	bne.n	8001e28 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	1c9a      	adds	r2, r3, #2
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d11c      	bne.n	8001e70 <HAL_SPI_TransmitReceive+0x1f2>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	1c9a      	adds	r2, r3, #2
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e70:	f7fe ff2e 	bl	8000cd0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d807      	bhi.n	8001e90 <HAL_SPI_TransmitReceive+0x212>
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d003      	beq.n	8001e90 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001e8e:	e0fb      	b.n	8002088 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1a3      	bne.n	8001de2 <HAL_SPI_TransmitReceive+0x164>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d19d      	bne.n	8001de2 <HAL_SPI_TransmitReceive+0x164>
 8001ea6:	e0df      	b.n	8002068 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_SPI_TransmitReceive+0x23a>
 8001eb0:	8a7b      	ldrh	r3, [r7, #18]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	f040 80cb 	bne.w	800204e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d912      	bls.n	8001ee8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	1c9a      	adds	r2, r3, #2
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b02      	subs	r3, #2
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ee6:	e0b2      	b.n	800204e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	330c      	adds	r3, #12
 8001ef2:	7812      	ldrb	r2, [r2, #0]
 8001ef4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f0e:	e09e      	b.n	800204e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d134      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x30a>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d02f      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x30a>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d12c      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d912      	bls.n	8001f5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	881a      	ldrh	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	1c9a      	adds	r2, r3, #2
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b02      	subs	r3, #2
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f5c:	e012      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	330c      	adds	r3, #12
 8001f68:	7812      	ldrb	r2, [r2, #0]
 8001f6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d148      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x3aa>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d042      	beq.n	8002028 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d923      	bls.n	8001ff6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	1c9a      	adds	r2, r3, #2
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b02      	subs	r3, #2
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d81f      	bhi.n	8002024 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	e016      	b.n	8002024 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f103 020c 	add.w	r2, r3, #12
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	7812      	ldrb	r2, [r2, #0]
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002028:	f7fe fe52 	bl	8000cd0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002034:	429a      	cmp	r2, r3
 8002036:	d803      	bhi.n	8002040 <HAL_SPI_TransmitReceive+0x3c2>
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d102      	bne.n	8002046 <HAL_SPI_TransmitReceive+0x3c8>
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800204c:	e01c      	b.n	8002088 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	f47f af5b 	bne.w	8001f10 <HAL_SPI_TransmitReceive+0x292>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	f47f af54 	bne.w	8001f10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f937 	bl	80022e0 <SPI_EndRxTxTransaction>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	661a      	str	r2, [r3, #96]	; 0x60
 8002084:	e000      	b.n	8002088 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002086:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800209c:	4618      	mov	r0, r3
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020b4:	f7fe fe0c 	bl	8000cd0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020c4:	f7fe fe04 	bl	8000cd0 <HAL_GetTick>
 80020c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	0d1b      	lsrs	r3, r3, #20
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020da:	e054      	b.n	8002186 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e2:	d050      	beq.n	8002186 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020e4:	f7fe fdf4 	bl	8000cd0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d902      	bls.n	80020fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d13d      	bne.n	8002176 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002108:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002112:	d111      	bne.n	8002138 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211c:	d004      	beq.n	8002128 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d107      	bne.n	8002138 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002136:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002140:	d10f      	bne.n	8002162 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002160:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e017      	b.n	80021a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3b01      	subs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4013      	ands	r3, r2
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d19b      	bne.n	80020dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000000 	.word	0x20000000

080021b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80021c6:	f7fe fd83 	bl	8000cd0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80021d6:	f7fe fd7b 	bl	8000cd0 <HAL_GetTick>
 80021da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	330c      	adds	r3, #12
 80021e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00da      	lsls	r2, r3, #3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	0d1b      	lsrs	r3, r3, #20
 80021f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80021fc:	e060      	b.n	80022c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002204:	d107      	bne.n	8002216 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d104      	bne.n	8002216 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002214:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d050      	beq.n	80022c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800221e:	f7fe fd57 	bl	8000cd0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222a:	429a      	cmp	r2, r3
 800222c:	d902      	bls.n	8002234 <SPI_WaitFifoStateUntilTimeout+0x80>
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	2b00      	cmp	r3, #0
 8002232:	d13d      	bne.n	80022b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002242:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800224c:	d111      	bne.n	8002272 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002256:	d004      	beq.n	8002262 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002260:	d107      	bne.n	8002272 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002270:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227a:	d10f      	bne.n	800229c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800229a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e010      	b.n	80022d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	3b01      	subs	r3, #1
 80022be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d196      	bne.n	80021fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000000 	.word	0x20000000

080022e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff ff5b 	bl	80021b4 <SPI_WaitFifoStateUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e046      	b.n	80023a2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <SPI_EndRxTxTransaction+0xcc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <SPI_EndRxTxTransaction+0xd0>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0d5b      	lsrs	r3, r3, #21
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002332:	d112      	bne.n	800235a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff feb0 	bl	80020a4 <SPI_WaitFlagStateUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e023      	b.n	80023a2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3b01      	subs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d0f2      	beq.n	800235a <SPI_EndRxTxTransaction+0x7a>
 8002374:	e000      	b.n	8002378 <SPI_EndRxTxTransaction+0x98>
        break;
 8002376:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff ff15 	bl	80021b4 <SPI_WaitFifoStateUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e000      	b.n	80023a2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000
 80023b0:	165e9f81 	.word	0x165e9f81

080023b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80023b8:	4904      	ldr	r1, [pc, #16]	; (80023cc <MX_FATFS_Init+0x18>)
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_FATFS_Init+0x1c>)
 80023bc:	f003 f92a 	bl	8005614 <FATFS_LinkDriver>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <MX_FATFS_Init+0x20>)
 80023c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000250 	.word	0x20000250
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	20000254 	.word	0x20000254

080023d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80023dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f9dd 	bl	80027b4 <USER_SPI_initialize>
 80023fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fabb 	bl	800298c <USER_SPI_status>
 8002416:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8002430:	7bf8      	ldrb	r0, [r7, #15]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	f000 fabe 	bl	80029b8 <USER_SPI_read>
 800243c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8002456:	7bf8      	ldrb	r0, [r7, #15]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	f000 fb11 	bl	8002a84 <USER_SPI_write>
 8002462:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	603a      	str	r2, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
 8002478:	460b      	mov	r3, r1
 800247a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800247c:	79b9      	ldrb	r1, [r7, #6]
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fb7a 	bl	8002b7c <USER_SPI_ioctl>
 8002488:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800249c:	f7fe fc18 	bl	8000cd0 <HAL_GetTick>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <SPI_Timer_On+0x20>)
 80024a4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <SPI_Timer_On+0x24>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200006b8 	.word	0x200006b8
 80024b8:	200006bc 	.word	0x200006bc

080024bc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80024c0:	f7fe fc06 	bl	8000cd0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <SPI_Timer_Status+0x24>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SPI_Timer_Status+0x28>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	bf34      	ite	cc
 80024d4:	2301      	movcc	r3, #1
 80024d6:	2300      	movcs	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200006b8 	.word	0x200006b8
 80024e4:	200006bc 	.word	0x200006bc

080024e8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80024f2:	f107 020f 	add.w	r2, r7, #15
 80024f6:	1df9      	adds	r1, r7, #7
 80024f8:	2332      	movs	r3, #50	; 0x32
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2301      	movs	r3, #1
 80024fe:	4804      	ldr	r0, [pc, #16]	; (8002510 <xchg_spi+0x28>)
 8002500:	f7ff fbbd 	bl	8001c7e <HAL_SPI_TransmitReceive>
    return rxDat;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200001e8 	.word	0x200001e8

08002514 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e00a      	b.n	800253a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	18d4      	adds	r4, r2, r3
 800252a:	20ff      	movs	r0, #255	; 0xff
 800252c:	f7ff ffdc 	bl	80024e8 <xchg_spi>
 8002530:	4603      	mov	r3, r0
 8002532:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3301      	adds	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d3f0      	bcc.n	8002524 <rcvr_spi_multi+0x10>
	}
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}

0800254c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e009      	b.n	8002570 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ffbf 	bl	80024e8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3301      	adds	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d3f1      	bcc.n	800255c <xmit_spi_multi+0x10>
	}
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800258a:	f7fe fba1 	bl	8000cd0 <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002594:	20ff      	movs	r0, #255	; 0xff
 8002596:	f7ff ffa7 	bl	80024e8 <xchg_spi>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2bff      	cmp	r3, #255	; 0xff
 80025a2:	d007      	beq.n	80025b4 <wait_ready+0x32>
 80025a4:	f7fe fb94 	bl	8000cd0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8ef      	bhi.n	8002594 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2bff      	cmp	r3, #255	; 0xff
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d2:	4804      	ldr	r0, [pc, #16]	; (80025e4 <despiselect+0x1c>)
 80025d4:	f7fe fe3e 	bl	8001254 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80025d8:	20ff      	movs	r0, #255	; 0xff
 80025da:	f7ff ff85 	bl	80024e8 <xchg_spi>

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40020400 	.word	0x40020400

080025e8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f2:	480a      	ldr	r0, [pc, #40]	; (800261c <spiselect+0x34>)
 80025f4:	f7fe fe2e 	bl	8001254 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80025f8:	20ff      	movs	r0, #255	; 0xff
 80025fa:	f7ff ff75 	bl	80024e8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80025fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002602:	f7ff ffbe 	bl	8002582 <wait_ready>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <spiselect+0x28>
 800260c:	2301      	movs	r3, #1
 800260e:	e002      	b.n	8002616 <spiselect+0x2e>

	despiselect();
 8002610:	f7ff ffda 	bl	80025c8 <despiselect>
	return 0;	/* Timeout */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40020400 	.word	0x40020400

08002620 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800262a:	20c8      	movs	r0, #200	; 0xc8
 800262c:	f7ff ff32 	bl	8002494 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002630:	20ff      	movs	r0, #255	; 0xff
 8002632:	f7ff ff59 	bl	80024e8 <xchg_spi>
 8002636:	4603      	mov	r3, r0
 8002638:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2bff      	cmp	r3, #255	; 0xff
 800263e:	d104      	bne.n	800264a <rcvr_datablock+0x2a>
 8002640:	f7ff ff3c 	bl	80024bc <SPI_Timer_Status>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f2      	bne.n	8002630 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2bfe      	cmp	r3, #254	; 0xfe
 800264e:	d001      	beq.n	8002654 <rcvr_datablock+0x34>
 8002650:	2300      	movs	r3, #0
 8002652:	e00a      	b.n	800266a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff5c 	bl	8002514 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800265c:	20ff      	movs	r0, #255	; 0xff
 800265e:	f7ff ff43 	bl	80024e8 <xchg_spi>
 8002662:	20ff      	movs	r0, #255	; 0xff
 8002664:	f7ff ff40 	bl	80024e8 <xchg_spi>

	return 1;						/* Function succeeded */
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800267e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002682:	f7ff ff7e 	bl	8002582 <wait_ready>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <xmit_datablock+0x1e>
 800268c:	2300      	movs	r3, #0
 800268e:	e01e      	b.n	80026ce <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff28 	bl	80024e8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	2bfd      	cmp	r3, #253	; 0xfd
 800269c:	d016      	beq.n	80026cc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800269e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff52 	bl	800254c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80026a8:	20ff      	movs	r0, #255	; 0xff
 80026aa:	f7ff ff1d 	bl	80024e8 <xchg_spi>
 80026ae:	20ff      	movs	r0, #255	; 0xff
 80026b0:	f7ff ff1a 	bl	80024e8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80026b4:	20ff      	movs	r0, #255	; 0xff
 80026b6:	f7ff ff17 	bl	80024e8 <xchg_spi>
 80026ba:	4603      	mov	r3, r0
 80026bc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d001      	beq.n	80026cc <xmit_datablock+0x5a>
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <xmit_datablock+0x5c>
	}
	return 1;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	6039      	str	r1, [r7, #0]
 80026e0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da0e      	bge.n	8002708 <send_cmd+0x32>
		cmd &= 0x7F;
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80026f2:	2100      	movs	r1, #0
 80026f4:	2037      	movs	r0, #55	; 0x37
 80026f6:	f7ff ffee 	bl	80026d6 <send_cmd>
 80026fa:	4603      	mov	r3, r0
 80026fc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d901      	bls.n	8002708 <send_cmd+0x32>
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	e051      	b.n	80027ac <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d008      	beq.n	8002720 <send_cmd+0x4a>
		despiselect();
 800270e:	f7ff ff5b 	bl	80025c8 <despiselect>
		if (!spiselect()) return 0xFF;
 8002712:	f7ff ff69 	bl	80025e8 <spiselect>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <send_cmd+0x4a>
 800271c:	23ff      	movs	r3, #255	; 0xff
 800271e:	e045      	b.n	80027ac <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fedd 	bl	80024e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	0e1b      	lsrs	r3, r3, #24
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fed7 	bl	80024e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fed1 	bl	80024e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fecb 	bl	80024e8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fec6 	bl	80024e8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <send_cmd+0x94>
 8002766:	2395      	movs	r3, #149	; 0x95
 8002768:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d101      	bne.n	8002774 <send_cmd+0x9e>
 8002770:	2387      	movs	r3, #135	; 0x87
 8002772:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff feb6 	bl	80024e8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d102      	bne.n	8002788 <send_cmd+0xb2>
 8002782:	20ff      	movs	r0, #255	; 0xff
 8002784:	f7ff feb0 	bl	80024e8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002788:	230a      	movs	r3, #10
 800278a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800278c:	20ff      	movs	r0, #255	; 0xff
 800278e:	f7ff feab 	bl	80024e8 <xchg_spi>
 8002792:	4603      	mov	r3, r0
 8002794:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800279a:	2b00      	cmp	r3, #0
 800279c:	da05      	bge.n	80027aa <send_cmd+0xd4>
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <send_cmd+0xb6>

	return res;							/* Return received response */
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <USER_SPI_initialize+0x14>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0d6      	b.n	8002976 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80027c8:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <USER_SPI_initialize+0x1cc>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <USER_SPI_initialize+0x2a>
 80027d6:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <USER_SPI_initialize+0x1cc>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e0cb      	b.n	8002976 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80027de:	4b69      	ldr	r3, [pc, #420]	; (8002984 <USER_SPI_initialize+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <USER_SPI_initialize+0x1d0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80027f0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80027f2:	230a      	movs	r3, #10
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e005      	b.n	8002804 <USER_SPI_initialize+0x50>
 80027f8:	20ff      	movs	r0, #255	; 0xff
 80027fa:	f7ff fe75 	bl	80024e8 <xchg_spi>
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	3b01      	subs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f6      	bne.n	80027f8 <USER_SPI_initialize+0x44>

	ty = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800280e:	2100      	movs	r1, #0
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff ff60 	bl	80026d6 <send_cmd>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	f040 808b 	bne.w	8002934 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800281e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002822:	f7ff fe37 	bl	8002494 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002826:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800282a:	2008      	movs	r0, #8
 800282c:	f7ff ff53 	bl	80026d6 <send_cmd>
 8002830:	4603      	mov	r3, r0
 8002832:	2b01      	cmp	r3, #1
 8002834:	d151      	bne.n	80028da <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	e00d      	b.n	8002858 <USER_SPI_initialize+0xa4>
 800283c:	7bfc      	ldrb	r4, [r7, #15]
 800283e:	20ff      	movs	r0, #255	; 0xff
 8002840:	f7ff fe52 	bl	80024e8 <xchg_spi>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	4423      	add	r3, r4
 800284e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	3301      	adds	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d9ee      	bls.n	800283c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800285e:	7abb      	ldrb	r3, [r7, #10]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d167      	bne.n	8002934 <USER_SPI_initialize+0x180>
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	2baa      	cmp	r3, #170	; 0xaa
 8002868:	d164      	bne.n	8002934 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800286a:	bf00      	nop
 800286c:	f7ff fe26 	bl	80024bc <SPI_Timer_Status>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <USER_SPI_initialize+0xd2>
 8002876:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800287a:	20a9      	movs	r0, #169	; 0xa9
 800287c:	f7ff ff2b 	bl	80026d6 <send_cmd>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f2      	bne.n	800286c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002886:	f7ff fe19 	bl	80024bc <SPI_Timer_Status>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d051      	beq.n	8002934 <USER_SPI_initialize+0x180>
 8002890:	2100      	movs	r1, #0
 8002892:	203a      	movs	r0, #58	; 0x3a
 8002894:	f7ff ff1f 	bl	80026d6 <send_cmd>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d14a      	bne.n	8002934 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e00d      	b.n	80028c0 <USER_SPI_initialize+0x10c>
 80028a4:	7bfc      	ldrb	r4, [r7, #15]
 80028a6:	20ff      	movs	r0, #255	; 0xff
 80028a8:	f7ff fe1e 	bl	80024e8 <xchg_spi>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4423      	add	r3, r4
 80028b6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	3301      	adds	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d9ee      	bls.n	80028a4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80028c6:	7a3b      	ldrb	r3, [r7, #8]
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <USER_SPI_initialize+0x120>
 80028d0:	230c      	movs	r3, #12
 80028d2:	e000      	b.n	80028d6 <USER_SPI_initialize+0x122>
 80028d4:	2304      	movs	r3, #4
 80028d6:	737b      	strb	r3, [r7, #13]
 80028d8:	e02c      	b.n	8002934 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80028da:	2100      	movs	r1, #0
 80028dc:	20a9      	movs	r0, #169	; 0xa9
 80028de:	f7ff fefa 	bl	80026d6 <send_cmd>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d804      	bhi.n	80028f2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80028e8:	2302      	movs	r3, #2
 80028ea:	737b      	strb	r3, [r7, #13]
 80028ec:	23a9      	movs	r3, #169	; 0xa9
 80028ee:	73bb      	strb	r3, [r7, #14]
 80028f0:	e003      	b.n	80028fa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80028f2:	2301      	movs	r3, #1
 80028f4:	737b      	strb	r3, [r7, #13]
 80028f6:	2301      	movs	r3, #1
 80028f8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80028fa:	bf00      	nop
 80028fc:	f7ff fdde 	bl	80024bc <SPI_Timer_Status>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <USER_SPI_initialize+0x162>
 8002906:	7bbb      	ldrb	r3, [r7, #14]
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fee3 	bl	80026d6 <send_cmd>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f2      	bne.n	80028fc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002916:	f7ff fdd1 	bl	80024bc <SPI_Timer_Status>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <USER_SPI_initialize+0x17c>
 8002920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002924:	2010      	movs	r0, #16
 8002926:	f7ff fed6 	bl	80026d6 <send_cmd>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <USER_SPI_initialize+0x180>
				ty = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <USER_SPI_initialize+0x1d4>)
 8002936:	7b7b      	ldrb	r3, [r7, #13]
 8002938:	7013      	strb	r3, [r2, #0]
	despiselect();
 800293a:	f7ff fe45 	bl	80025c8 <despiselect>

	if (ty) {			/* OK */
 800293e:	7b7b      	ldrb	r3, [r7, #13]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d012      	beq.n	800296a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <USER_SPI_initialize+0x1d0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <USER_SPI_initialize+0x1d0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0210 	orr.w	r2, r2, #16
 8002956:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <USER_SPI_initialize+0x1cc>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <USER_SPI_initialize+0x1cc>)
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e002      	b.n	8002970 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <USER_SPI_initialize+0x1cc>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <USER_SPI_initialize+0x1cc>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	20000020 	.word	0x20000020
 8002984:	200001e8 	.word	0x200001e8
 8002988:	200001a8 	.word	0x200001a8

0800298c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <USER_SPI_status+0x14>
 800299c:	2301      	movs	r3, #1
 800299e:	e002      	b.n	80029a6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <USER_SPI_status+0x28>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b2db      	uxtb	r3, r3
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000020 	.word	0x20000020

080029b8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4603      	mov	r3, r0
 80029c6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <USER_SPI_read+0x1c>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <USER_SPI_read+0x20>
 80029d4:	2304      	movs	r3, #4
 80029d6:	e04d      	b.n	8002a74 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <USER_SPI_read+0xc4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <USER_SPI_read+0x32>
 80029e6:	2303      	movs	r3, #3
 80029e8:	e044      	b.n	8002a74 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <USER_SPI_read+0xc8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <USER_SPI_read+0x44>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d111      	bne.n	8002a26 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	2011      	movs	r0, #17
 8002a06:	f7ff fe66 	bl	80026d6 <send_cmd>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d129      	bne.n	8002a64 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a14:	68b8      	ldr	r0, [r7, #8]
 8002a16:	f7ff fe03 	bl	8002620 <rcvr_datablock>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d021      	beq.n	8002a64 <USER_SPI_read+0xac>
			count = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	e01e      	b.n	8002a64 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	2012      	movs	r0, #18
 8002a2a:	f7ff fe54 	bl	80026d6 <send_cmd>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d117      	bne.n	8002a64 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f7ff fdf1 	bl	8002620 <rcvr_datablock>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <USER_SPI_read+0xa2>
				buff += 512;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a4a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ed      	bne.n	8002a34 <USER_SPI_read+0x7c>
 8002a58:	e000      	b.n	8002a5c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002a5a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	200c      	movs	r0, #12
 8002a60:	f7ff fe39 	bl	80026d6 <send_cmd>
		}
	}
	despiselect();
 8002a64:	f7ff fdb0 	bl	80025c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000020 	.word	0x20000020
 8002a80:	200001a8 	.word	0x200001a8

08002a84 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <USER_SPI_write+0x1c>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <USER_SPI_write+0x20>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e063      	b.n	8002b6c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <USER_SPI_write+0xf0>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <USER_SPI_write+0x32>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e05a      	b.n	8002b6c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <USER_SPI_write+0xf0>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <USER_SPI_write+0x44>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e051      	b.n	8002b6c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <USER_SPI_write+0xf4>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <USER_SPI_write+0x56>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d110      	bne.n	8002b02 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	2018      	movs	r0, #24
 8002ae4:	f7ff fdf7 	bl	80026d6 <send_cmd>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d136      	bne.n	8002b5c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002aee:	21fe      	movs	r1, #254	; 0xfe
 8002af0:	68b8      	ldr	r0, [r7, #8]
 8002af2:	f7ff fdbe 	bl	8002672 <xmit_datablock>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02f      	beq.n	8002b5c <USER_SPI_write+0xd8>
			count = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	e02c      	b.n	8002b5c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <USER_SPI_write+0xf4>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <USER_SPI_write+0x92>
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	2097      	movs	r0, #151	; 0x97
 8002b12:	f7ff fde0 	bl	80026d6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	2019      	movs	r0, #25
 8002b1a:	f7ff fddc 	bl	80026d6 <send_cmd>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11b      	bne.n	8002b5c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b24:	21fc      	movs	r1, #252	; 0xfc
 8002b26:	68b8      	ldr	r0, [r7, #8]
 8002b28:	f7ff fda3 	bl	8002672 <xmit_datablock>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <USER_SPI_write+0xc4>
				buff += 512;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b38:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ee      	bne.n	8002b24 <USER_SPI_write+0xa0>
 8002b46:	e000      	b.n	8002b4a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b48:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002b4a:	21fd      	movs	r1, #253	; 0xfd
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7ff fd90 	bl	8002672 <xmit_datablock>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <USER_SPI_write+0xd8>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002b5c:	f7ff fd34 	bl	80025c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000020 	.word	0x20000020
 8002b78:	200001a8 	.word	0x200001a8

08002b7c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	603a      	str	r2, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <USER_SPI_ioctl+0x1a>
 8002b92:	2304      	movs	r3, #4
 8002b94:	e15a      	b.n	8002e4c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002b96:	4baf      	ldr	r3, [pc, #700]	; (8002e54 <USER_SPI_ioctl+0x2d8>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <USER_SPI_ioctl+0x2c>
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e151      	b.n	8002e4c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002bae:	79bb      	ldrb	r3, [r7, #6]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	f200 8136 	bhi.w	8002e22 <USER_SPI_ioctl+0x2a6>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <USER_SPI_ioctl+0x40>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bd1 	.word	0x08002bd1
 8002bc0:	08002be5 	.word	0x08002be5
 8002bc4:	08002e23 	.word	0x08002e23
 8002bc8:	08002c91 	.word	0x08002c91
 8002bcc:	08002d87 	.word	0x08002d87
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002bd0:	f7ff fd0a 	bl	80025e8 <spiselect>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8127 	beq.w	8002e2a <USER_SPI_ioctl+0x2ae>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002be2:	e122      	b.n	8002e2a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002be4:	2100      	movs	r1, #0
 8002be6:	2009      	movs	r0, #9
 8002be8:	f7ff fd75 	bl	80026d6 <send_cmd>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 811d 	bne.w	8002e2e <USER_SPI_ioctl+0x2b2>
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	2110      	movs	r1, #16
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fd10 	bl	8002620 <rcvr_datablock>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8113 	beq.w	8002e2e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002c08:	7b3b      	ldrb	r3, [r7, #12]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d111      	bne.n	8002c36 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002c12:	7d7b      	ldrb	r3, [r7, #21]
 8002c14:	461a      	mov	r2, r3
 8002c16:	7d3b      	ldrb	r3, [r7, #20]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	4413      	add	r3, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002c26:	4413      	add	r3, r2
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	029a      	lsls	r2, r3, #10
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e028      	b.n	8002c88 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c36:	7c7b      	ldrb	r3, [r7, #17]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	7dbb      	ldrb	r3, [r7, #22]
 8002c40:	09db      	lsrs	r3, r3, #7
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	7d7b      	ldrb	r3, [r7, #21]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0306 	and.w	r3, r3, #6
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002c5e:	7d3b      	ldrb	r3, [r7, #20]
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	7cbb      	ldrb	r3, [r7, #18]
 8002c6e:	029b      	lsls	r3, r3, #10
 8002c70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c74:	4413      	add	r3, r2
 8002c76:	3301      	adds	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002c7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c7e:	3b09      	subs	r3, #9
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	409a      	lsls	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002c8e:	e0ce      	b.n	8002e2e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002c90:	4b71      	ldr	r3, [pc, #452]	; (8002e58 <USER_SPI_ioctl+0x2dc>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d031      	beq.n	8002d00 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	208d      	movs	r0, #141	; 0x8d
 8002ca0:	f7ff fd19 	bl	80026d6 <send_cmd>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 80c3 	bne.w	8002e32 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002cac:	20ff      	movs	r0, #255	; 0xff
 8002cae:	f7ff fc1b 	bl	80024e8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fcb1 	bl	8002620 <rcvr_datablock>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b6 	beq.w	8002e32 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002cc6:	2330      	movs	r3, #48	; 0x30
 8002cc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002ccc:	e007      	b.n	8002cde <USER_SPI_ioctl+0x162>
 8002cce:	20ff      	movs	r0, #255	; 0xff
 8002cd0:	f7ff fc0a 	bl	80024e8 <xchg_spi>
 8002cd4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002cde:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f3      	bne.n	8002cce <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002ce6:	7dbb      	ldrb	r3, [r7, #22]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	2310      	movs	r3, #16
 8002cf0:	fa03 f202 	lsl.w	r2, r3, r2
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002cfe:	e098      	b.n	8002e32 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d00:	2100      	movs	r1, #0
 8002d02:	2009      	movs	r0, #9
 8002d04:	f7ff fce7 	bl	80026d6 <send_cmd>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 8091 	bne.w	8002e32 <USER_SPI_ioctl+0x2b6>
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	2110      	movs	r1, #16
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fc82 	bl	8002620 <rcvr_datablock>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8087 	beq.w	8002e32 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <USER_SPI_ioctl+0x2dc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002d30:	7dbb      	ldrb	r3, [r7, #22]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002d38:	7dfa      	ldrb	r2, [r7, #23]
 8002d3a:	09d2      	lsrs	r2, r2, #7
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	4413      	add	r3, r2
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	7e7b      	ldrb	r3, [r7, #25]
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e013      	b.n	8002d7e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002d56:	7dbb      	ldrb	r3, [r7, #22]
 8002d58:	109b      	asrs	r3, r3, #2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	3301      	adds	r3, #1
 8002d62:	7dfa      	ldrb	r2, [r7, #23]
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	f002 0218 	and.w	r2, r2, #24
 8002d6a:	7df9      	ldrb	r1, [r7, #23]
 8002d6c:	0949      	lsrs	r1, r1, #5
 8002d6e:	b2c9      	uxtb	r1, r1
 8002d70:	440a      	add	r2, r1
 8002d72:	3201      	adds	r2, #1
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002d84:	e055      	b.n	8002e32 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <USER_SPI_ioctl+0x2dc>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f003 0306 	and.w	r3, r3, #6
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d051      	beq.n	8002e36 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002d92:	f107 020c 	add.w	r2, r7, #12
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	210b      	movs	r1, #11
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff feee 	bl	8002b7c <USER_SPI_ioctl>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d149      	bne.n	8002e3a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002da6:	7b3b      	ldrb	r3, [r7, #12]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <USER_SPI_ioctl+0x23e>
 8002db0:	7dbb      	ldrb	r3, [r7, #22]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d041      	beq.n	8002e3e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <USER_SPI_ioctl+0x2dc>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	025b      	lsls	r3, r3, #9
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	025b      	lsls	r3, r3, #9
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de4:	2020      	movs	r0, #32
 8002de6:	f7ff fc76 	bl	80026d6 <send_cmd>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d128      	bne.n	8002e42 <USER_SPI_ioctl+0x2c6>
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	2021      	movs	r0, #33	; 0x21
 8002df4:	f7ff fc6f 	bl	80026d6 <send_cmd>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d121      	bne.n	8002e42 <USER_SPI_ioctl+0x2c6>
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2026      	movs	r0, #38	; 0x26
 8002e02:	f7ff fc68 	bl	80026d6 <send_cmd>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11a      	bne.n	8002e42 <USER_SPI_ioctl+0x2c6>
 8002e0c:	f247 5030 	movw	r0, #30000	; 0x7530
 8002e10:	f7ff fbb7 	bl	8002582 <wait_ready>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d013      	beq.n	8002e42 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002e20:	e00f      	b.n	8002e42 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002e22:	2304      	movs	r3, #4
 8002e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002e28:	e00c      	b.n	8002e44 <USER_SPI_ioctl+0x2c8>
		break;
 8002e2a:	bf00      	nop
 8002e2c:	e00a      	b.n	8002e44 <USER_SPI_ioctl+0x2c8>
		break;
 8002e2e:	bf00      	nop
 8002e30:	e008      	b.n	8002e44 <USER_SPI_ioctl+0x2c8>
		break;
 8002e32:	bf00      	nop
 8002e34:	e006      	b.n	8002e44 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e36:	bf00      	nop
 8002e38:	e004      	b.n	8002e44 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e3a:	bf00      	nop
 8002e3c:	e002      	b.n	8002e44 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <USER_SPI_ioctl+0x2c8>
		break;
 8002e42:	bf00      	nop
	}

	despiselect();
 8002e44:	f7ff fbc0 	bl	80025c8 <despiselect>

	return res;
 8002e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3730      	adds	r7, #48	; 0x30
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000020 	.word	0x20000020
 8002e58:	200001a8 	.word	0x200001a8

08002e5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <disk_status+0x30>)
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	79fa      	ldrb	r2, [r7, #7]
 8002e74:	4905      	ldr	r1, [pc, #20]	; (8002e8c <disk_status+0x30>)
 8002e76:	440a      	add	r2, r1
 8002e78:	7a12      	ldrb	r2, [r2, #8]
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4798      	blx	r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200001d4 	.word	0x200001d4

08002e90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <disk_initialize+0x48>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d111      	bne.n	8002ecc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <disk_initialize+0x48>)
 8002eac:	2101      	movs	r1, #1
 8002eae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <disk_initialize+0x48>)
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	79fa      	ldrb	r2, [r7, #7]
 8002ebe:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <disk_initialize+0x48>)
 8002ec0:	440a      	add	r2, r1
 8002ec2:	7a12      	ldrb	r2, [r2, #8]
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4798      	blx	r3
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200001d4 	.word	0x200001d4

08002edc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <disk_read+0x3c>)
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	689c      	ldr	r4, [r3, #8]
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <disk_read+0x3c>)
 8002efc:	4413      	add	r3, r2
 8002efe:	7a18      	ldrb	r0, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	47a0      	blx	r4
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200001d4 	.word	0x200001d4

08002f1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <disk_write+0x3c>)
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	68dc      	ldr	r4, [r3, #12]
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <disk_write+0x3c>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	7a18      	ldrb	r0, [r3, #8]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	47a0      	blx	r4
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200001d4 	.word	0x200001d4

08002f5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	603a      	str	r2, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <disk_ioctl+0x38>)
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	79fa      	ldrb	r2, [r7, #7]
 8002f7a:	4906      	ldr	r1, [pc, #24]	; (8002f94 <disk_ioctl+0x38>)
 8002f7c:	440a      	add	r2, r1
 8002f7e:	7a10      	ldrb	r0, [r2, #8]
 8002f80:	79b9      	ldrb	r1, [r7, #6]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4798      	blx	r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	73fb      	strb	r3, [r7, #15]
  return res;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200001d4 	.word	0x200001d4

08002f98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002fba:	89fb      	ldrh	r3, [r7, #14]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3303      	adds	r3, #3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	3202      	adds	r2, #2
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	3201      	adds	r2, #1
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
	return rv;
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	887a      	ldrh	r2, [r7, #2]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	1c53      	adds	r3, r2, #1
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	6179      	str	r1, [r7, #20]
 80030c2:	7812      	ldrb	r2, [r2, #0]
 80030c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f1      	bne.n	80030b6 <mem_cpy+0x1a>
	}
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	617a      	str	r2, [r7, #20]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f3      	bne.n	80030ee <mem_set+0x10>
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	61fa      	str	r2, [r7, #28]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	61ba      	str	r2, [r7, #24]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	1acb      	subs	r3, r1, r3
 8003140:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3b01      	subs	r3, #1
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <mem_cmp+0x40>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0eb      	beq.n	800312c <mem_cmp+0x18>

	return r;
 8003154:	697b      	ldr	r3, [r7, #20]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3724      	adds	r7, #36	; 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800316c:	e002      	b.n	8003174 <chk_chr+0x12>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3301      	adds	r3, #1
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <chk_chr+0x26>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	4293      	cmp	r3, r2
 8003186:	d1f2      	bne.n	800316e <chk_chr+0xc>
	return *str;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	781b      	ldrb	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e029      	b.n	8003200 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80031ac:	4a27      	ldr	r2, [pc, #156]	; (800324c <chk_lock+0xb4>)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	4413      	add	r3, r2
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01d      	beq.n	80031f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80031ba:	4a24      	ldr	r2, [pc, #144]	; (800324c <chk_lock+0xb4>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4413      	add	r3, r2
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d116      	bne.n	80031fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80031cc:	4a1f      	ldr	r2, [pc, #124]	; (800324c <chk_lock+0xb4>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80031dc:	429a      	cmp	r2, r3
 80031de:	d10c      	bne.n	80031fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80031e0:	4a1a      	ldr	r2, [pc, #104]	; (800324c <chk_lock+0xb4>)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	4413      	add	r3, r2
 80031e8:	3308      	adds	r3, #8
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d102      	bne.n	80031fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80031f4:	e007      	b.n	8003206 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d9d2      	bls.n	80031ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d109      	bne.n	8003220 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <chk_lock+0x80>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d101      	bne.n	800321c <chk_lock+0x84>
 8003218:	2300      	movs	r3, #0
 800321a:	e010      	b.n	800323e <chk_lock+0xa6>
 800321c:	2312      	movs	r3, #18
 800321e:	e00e      	b.n	800323e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d108      	bne.n	8003238 <chk_lock+0xa0>
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <chk_lock+0xb4>)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	4413      	add	r3, r2
 800322e:	330c      	adds	r3, #12
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003236:	d101      	bne.n	800323c <chk_lock+0xa4>
 8003238:	2310      	movs	r3, #16
 800323a:	e000      	b.n	800323e <chk_lock+0xa6>
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	200001b4 	.word	0x200001b4

08003250 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	e002      	b.n	8003262 <enq_lock+0x12>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3301      	adds	r3, #1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d806      	bhi.n	8003276 <enq_lock+0x26>
 8003268:	4a09      	ldr	r2, [pc, #36]	; (8003290 <enq_lock+0x40>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	4413      	add	r3, r2
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f2      	bne.n	800325c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	200001b4 	.word	0x200001b4

08003294 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e01f      	b.n	80032e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80032a4:	4a41      	ldr	r2, [pc, #260]	; (80033ac <inc_lock+0x118>)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d113      	bne.n	80032de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80032b6:	4a3d      	ldr	r2, [pc, #244]	; (80033ac <inc_lock+0x118>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d109      	bne.n	80032de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <inc_lock+0x118>)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4413      	add	r3, r2
 80032d2:	3308      	adds	r3, #8
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80032da:	429a      	cmp	r2, r3
 80032dc:	d006      	beq.n	80032ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3301      	adds	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d9dc      	bls.n	80032a4 <inc_lock+0x10>
 80032ea:	e000      	b.n	80032ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80032ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d132      	bne.n	800335a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e002      	b.n	8003300 <inc_lock+0x6c>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3301      	adds	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d806      	bhi.n	8003314 <inc_lock+0x80>
 8003306:	4a29      	ldr	r2, [pc, #164]	; (80033ac <inc_lock+0x118>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f2      	bne.n	80032fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d101      	bne.n	800331e <inc_lock+0x8a>
 800331a:	2300      	movs	r3, #0
 800331c:	e040      	b.n	80033a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4922      	ldr	r1, [pc, #136]	; (80033ac <inc_lock+0x118>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	440b      	add	r3, r1
 800332a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	491e      	ldr	r1, [pc, #120]	; (80033ac <inc_lock+0x118>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	440b      	add	r3, r1
 8003338:	3304      	adds	r3, #4
 800333a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	491a      	ldr	r1, [pc, #104]	; (80033ac <inc_lock+0x118>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	440b      	add	r3, r1
 8003348:	3308      	adds	r3, #8
 800334a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <inc_lock+0x118>)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	330c      	adds	r3, #12
 8003356:	2200      	movs	r2, #0
 8003358:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <inc_lock+0xe0>
 8003360:	4a12      	ldr	r2, [pc, #72]	; (80033ac <inc_lock+0x118>)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	4413      	add	r3, r2
 8003368:	330c      	adds	r3, #12
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <inc_lock+0xe0>
 8003370:	2300      	movs	r3, #0
 8003372:	e015      	b.n	80033a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <inc_lock+0xf8>
 800337a:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <inc_lock+0x118>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	4413      	add	r3, r2
 8003382:	330c      	adds	r3, #12
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	e001      	b.n	8003390 <inc_lock+0xfc>
 800338c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003390:	4906      	ldr	r1, [pc, #24]	; (80033ac <inc_lock+0x118>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	440b      	add	r3, r1
 8003398:	330c      	adds	r3, #12
 800339a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	200001b4 	.word	0x200001b4

080033b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d825      	bhi.n	8003410 <dec_lock+0x60>
		n = Files[i].ctr;
 80033c4:	4a17      	ldr	r2, [pc, #92]	; (8003424 <dec_lock+0x74>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4413      	add	r3, r2
 80033cc:	330c      	adds	r3, #12
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d8:	d101      	bne.n	80033de <dec_lock+0x2e>
 80033da:	2300      	movs	r3, #0
 80033dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <dec_lock+0x3a>
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80033ea:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <dec_lock+0x74>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4413      	add	r3, r2
 80033f2:	330c      	adds	r3, #12
 80033f4:	89fa      	ldrh	r2, [r7, #14]
 80033f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80033f8:	89fb      	ldrh	r3, [r7, #14]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <dec_lock+0x5a>
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <dec_lock+0x74>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	4413      	add	r3, r2
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	737b      	strb	r3, [r7, #13]
 800340e:	e001      	b.n	8003414 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003410:	2302      	movs	r3, #2
 8003412:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003414:	7b7b      	ldrb	r3, [r7, #13]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	200001b4 	.word	0x200001b4

08003428 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e010      	b.n	8003458 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003436:	4a0d      	ldr	r2, [pc, #52]	; (800346c <clear_lock+0x44>)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d105      	bne.n	8003452 <clear_lock+0x2a>
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <clear_lock+0x44>)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4413      	add	r3, r2
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3301      	adds	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d9eb      	bls.n	8003436 <clear_lock+0xe>
	}
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	200001b4 	.word	0x200001b4

08003470 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d034      	beq.n	80034ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7858      	ldrb	r0, [r3, #1]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003494:	2301      	movs	r3, #1
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	f7ff fd40 	bl	8002f1c <disk_write>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e022      	b.n	80034ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	1ad2      	subs	r2, r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d217      	bcs.n	80034ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	789b      	ldrb	r3, [r3, #2]
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	e010      	b.n	80034e8 <sync_window+0x78>
					wsect += fs->fsize;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4413      	add	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7858      	ldrb	r0, [r3, #1]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80034da:	2301      	movs	r3, #1
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	f7ff fd1d 	bl	8002f1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d8eb      	bhi.n	80034c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d01b      	beq.n	8003548 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ffad 	bl	8003470 <sync_window>
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d113      	bne.n	8003548 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7858      	ldrb	r0, [r3, #1]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800352a:	2301      	movs	r3, #1
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	f7ff fcd5 	bl	8002edc <disk_read>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff87 	bl	8003470 <sync_window>
 8003562:	4603      	mov	r3, r0
 8003564:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d158      	bne.n	800361e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d148      	bne.n	8003606 <sync_fs+0xb2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	791b      	ldrb	r3, [r3, #4]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d144      	bne.n	8003606 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3330      	adds	r3, #48	; 0x30
 8003580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fda9 	bl	80030de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3330      	adds	r3, #48	; 0x30
 8003590:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003594:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fd38 	bl	800300e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3330      	adds	r3, #48	; 0x30
 80035a2:	4921      	ldr	r1, [pc, #132]	; (8003628 <sync_fs+0xd4>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fd4d 	bl	8003044 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3330      	adds	r3, #48	; 0x30
 80035ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80035b2:	491e      	ldr	r1, [pc, #120]	; (800362c <sync_fs+0xd8>)
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fd45 	bl	8003044 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3330      	adds	r3, #48	; 0x30
 80035be:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f7ff fd3b 	bl	8003044 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3330      	adds	r3, #48	; 0x30
 80035d2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f7ff fd31 	bl	8003044 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7858      	ldrb	r0, [r3, #1]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	2301      	movs	r3, #1
 80035fc:	f7ff fc8e 	bl	8002f1c <disk_write>
			fs->fsi_flag = 0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fca4 	bl	8002f5c <disk_ioctl>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <sync_fs+0xca>
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	41615252 	.word	0x41615252
 800362c:	61417272 	.word	0x61417272

08003630 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	3b02      	subs	r3, #2
 800363e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	3b02      	subs	r3, #2
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d301      	bcc.n	8003650 <clust2sect+0x20>
 800364c:	2300      	movs	r3, #0
 800364e:	e008      	b.n	8003662 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	895b      	ldrh	r3, [r3, #10]
 8003654:	461a      	mov	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	fb03 f202 	mul.w	r2, r3, r2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	4413      	add	r3, r2
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d904      	bls.n	800368e <get_fat+0x20>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <get_fat+0x26>
		val = 1;	/* Internal error */
 800368e:	2301      	movs	r3, #1
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e08f      	b.n	80037b4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d062      	beq.n	8003768 <get_fat+0xfa>
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	dc7c      	bgt.n	80037a0 <get_fat+0x132>
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d002      	beq.n	80036b0 <get_fat+0x42>
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d042      	beq.n	8003734 <get_fat+0xc6>
 80036ae:	e077      	b.n	80037a0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0a5b      	lsrs	r3, r3, #9
 80036c6:	4413      	add	r3, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	6938      	ldr	r0, [r7, #16]
 80036cc:	f7ff ff14 	bl	80034f8 <move_window>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d167      	bne.n	80037a6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	0a5b      	lsrs	r3, r3, #9
 80036f2:	4413      	add	r3, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	6938      	ldr	r0, [r7, #16]
 80036f8:	f7ff fefe 	bl	80034f8 <move_window>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d153      	bne.n	80037aa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <get_fat+0xbc>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	e002      	b.n	8003730 <get_fat+0xc2>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	617b      	str	r3, [r7, #20]
			break;
 8003732:	e03f      	b.n	80037b4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	4413      	add	r3, r2
 800373e:	4619      	mov	r1, r3
 8003740:	6938      	ldr	r0, [r7, #16]
 8003742:	f7ff fed9 	bl	80034f8 <move_window>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d130      	bne.n	80037ae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800375a:	4413      	add	r3, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fc1b 	bl	8002f98 <ld_word>
 8003762:	4603      	mov	r3, r0
 8003764:	617b      	str	r3, [r7, #20]
			break;
 8003766:	e025      	b.n	80037b4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	09db      	lsrs	r3, r3, #7
 8003770:	4413      	add	r3, r2
 8003772:	4619      	mov	r1, r3
 8003774:	6938      	ldr	r0, [r7, #16]
 8003776:	f7ff febf 	bl	80034f8 <move_window>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d118      	bne.n	80037b2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800378e:	4413      	add	r3, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fc19 	bl	8002fc8 <ld_dword>
 8003796:	4603      	mov	r3, r0
 8003798:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800379c:	617b      	str	r3, [r7, #20]
			break;
 800379e:	e009      	b.n	80037b4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e006      	b.n	80037b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037a6:	bf00      	nop
 80037a8:	e004      	b.n	80037b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80037b2:	bf00      	nop
		}
	}

	return val;
 80037b4:	697b      	ldr	r3, [r7, #20]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80037be:	b590      	push	{r4, r7, lr}
 80037c0:	b089      	sub	sp, #36	; 0x24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80037ca:	2302      	movs	r3, #2
 80037cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f240 80d2 	bls.w	800397a <put_fat+0x1bc>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	f080 80cc 	bcs.w	800397a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	f000 8096 	beq.w	8003918 <put_fat+0x15a>
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	f300 80cd 	bgt.w	800398c <put_fat+0x1ce>
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d002      	beq.n	80037fc <put_fat+0x3e>
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d06e      	beq.n	80038d8 <put_fat+0x11a>
 80037fa:	e0c7      	b.n	800398c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	0a5b      	lsrs	r3, r3, #9
 8003812:	4413      	add	r3, r2
 8003814:	4619      	mov	r1, r3
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff fe6e 	bl	80034f8 <move_window>
 800381c:	4603      	mov	r3, r0
 800381e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003820:	7ffb      	ldrb	r3, [r7, #31]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 80ab 	bne.w	800397e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1c59      	adds	r1, r3, #1
 8003832:	61b9      	str	r1, [r7, #24]
 8003834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003838:	4413      	add	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <put_fat+0xa4>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b25b      	sxtb	r3, r3
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	b25a      	sxtb	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	b25b      	sxtb	r3, r3
 800385a:	4313      	orrs	r3, r2
 800385c:	b25b      	sxtb	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e001      	b.n	8003866 <put_fat+0xa8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	0a5b      	lsrs	r3, r3, #9
 8003878:	4413      	add	r3, r2
 800387a:	4619      	mov	r1, r3
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff fe3b 	bl	80034f8 <move_window>
 8003882:	4603      	mov	r3, r0
 8003884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003886:	7ffb      	ldrb	r3, [r7, #31]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d17a      	bne.n	8003982 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003898:	4413      	add	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <put_fat+0xf0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e00e      	b.n	80038cc <put_fat+0x10e>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	f023 030f 	bic.w	r3, r3, #15
 80038b8:	b25a      	sxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	b25b      	sxtb	r3, r3
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b25b      	sxtb	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	70da      	strb	r2, [r3, #3]
			break;
 80038d6:	e059      	b.n	800398c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	4413      	add	r3, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff fe07 	bl	80034f8 <move_window>
 80038ea:	4603      	mov	r3, r0
 80038ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038ee:	7ffb      	ldrb	r3, [r7, #31]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d148      	bne.n	8003986 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003902:	4413      	add	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	b292      	uxth	r2, r2
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fb7f 	bl	800300e <st_word>
			fs->wflag = 1;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	70da      	strb	r2, [r3, #3]
			break;
 8003916:	e039      	b.n	800398c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1a      	ldr	r2, [r3, #32]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	4413      	add	r3, r2
 8003922:	4619      	mov	r1, r3
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff fde7 	bl	80034f8 <move_window>
 800392a:	4603      	mov	r3, r0
 800392c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800392e:	7ffb      	ldrb	r3, [r7, #31]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12a      	bne.n	800398a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003948:	4413      	add	r3, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fb3c 	bl	8002fc8 <ld_dword>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003956:	4323      	orrs	r3, r4
 8003958:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003968:	4413      	add	r3, r2
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fb69 	bl	8003044 <st_dword>
			fs->wflag = 1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	70da      	strb	r2, [r3, #3]
			break;
 8003978:	e008      	b.n	800398c <put_fat+0x1ce>
		}
	}
 800397a:	bf00      	nop
 800397c:	e006      	b.n	800398c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800398a:	bf00      	nop
	return res;
 800398c:	7ffb      	ldrb	r3, [r7, #31]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3724      	adds	r7, #36	; 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}

08003996 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d904      	bls.n	80039bc <remove_chain+0x26>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d301      	bcc.n	80039c0 <remove_chain+0x2a>
 80039bc:	2302      	movs	r3, #2
 80039be:	e04b      	b.n	8003a58 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80039c6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	69b8      	ldr	r0, [r7, #24]
 80039ce:	f7ff fef6 	bl	80037be <put_fat>
 80039d2:	4603      	mov	r3, r0
 80039d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80039d6:	7ffb      	ldrb	r3, [r7, #31]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <remove_chain+0x4a>
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
 80039de:	e03b      	b.n	8003a58 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff fe43 	bl	800366e <get_fat>
 80039e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d031      	beq.n	8003a54 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <remove_chain+0x64>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e02e      	b.n	8003a58 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d101      	bne.n	8003a06 <remove_chain+0x70>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e028      	b.n	8003a58 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003a06:	2200      	movs	r2, #0
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	69b8      	ldr	r0, [r7, #24]
 8003a0c:	f7ff fed7 	bl	80037be <put_fat>
 8003a10:	4603      	mov	r3, r0
 8003a12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003a14:	7ffb      	ldrb	r3, [r7, #31]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <remove_chain+0x88>
 8003a1a:	7ffb      	ldrb	r3, [r7, #31]
 8003a1c:	e01c      	b.n	8003a58 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	3b02      	subs	r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d20b      	bcs.n	8003a44 <remove_chain+0xae>
			fs->free_clst++;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	791b      	ldrb	r3, [r3, #4]
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3c6      	bcc.n	80039e0 <remove_chain+0x4a>
 8003a52:	e000      	b.n	8003a56 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003a54:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10d      	bne.n	8003a92 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <create_chain+0x2c>
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d31b      	bcc.n	8003ac4 <create_chain+0x64>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e018      	b.n	8003ac4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003a92:	6839      	ldr	r1, [r7, #0]
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fdea 	bl	800366e <get_fat>
 8003a9a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d801      	bhi.n	8003aa6 <create_chain+0x46>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e070      	b.n	8003b88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d101      	bne.n	8003ab2 <create_chain+0x52>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	e06a      	b.n	8003b88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d201      	bcs.n	8003ac0 <create_chain+0x60>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	e063      	b.n	8003b88 <create_chain+0x128>
		scl = clst;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d307      	bcc.n	8003ae8 <create_chain+0x88>
				ncl = 2;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d901      	bls.n	8003ae8 <create_chain+0x88>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e04f      	b.n	8003b88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003ae8:	69f9      	ldr	r1, [r7, #28]
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fdbf 	bl	800366e <get_fat>
 8003af0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d003      	beq.n	8003b06 <create_chain+0xa6>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b04:	d101      	bne.n	8003b0a <create_chain+0xaa>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	e03e      	b.n	8003b88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d1da      	bne.n	8003ac8 <create_chain+0x68>
 8003b12:	2300      	movs	r3, #0
 8003b14:	e038      	b.n	8003b88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003b16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1c:	69f9      	ldr	r1, [r7, #28]
 8003b1e:	6938      	ldr	r0, [r7, #16]
 8003b20:	f7ff fe4d 	bl	80037be <put_fat>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <create_chain+0xe2>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	6938      	ldr	r0, [r7, #16]
 8003b3a:	f7ff fe40 	bl	80037be <put_fat>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <create_chain+0x116>
		fs->last_clst = ncl;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	3b02      	subs	r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d804      	bhi.n	8003b66 <create_chain+0x106>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	791b      	ldrb	r3, [r3, #4]
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	711a      	strb	r2, [r3, #4]
 8003b74:	e007      	b.n	8003b86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d102      	bne.n	8003b82 <create_chain+0x122>
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	e000      	b.n	8003b84 <create_chain+0x124>
 8003b82:	2301      	movs	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003b86:	69fb      	ldr	r3, [r7, #28]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	0a5b      	lsrs	r3, r3, #9
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	8952      	ldrh	r2, [r2, #10]
 8003bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1d1a      	adds	r2, r3, #4
 8003bba:	613a      	str	r2, [r7, #16]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <clmt_clust+0x3a>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e010      	b.n	8003bec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d307      	bcc.n	8003be2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003be0:	e7e9      	b.n	8003bb6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003be2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c0e:	d204      	bcs.n	8003c1a <dir_sdi+0x22>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <dir_sdi+0x26>
		return FR_INT_ERR;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e063      	b.n	8003ce6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <dir_sdi+0x46>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d902      	bls.n	8003c3e <dir_sdi+0x46>
		clst = fs->dirbase;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10c      	bne.n	8003c5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	8912      	ldrh	r2, [r2, #8]
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d301      	bcc.n	8003c54 <dir_sdi+0x5c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e048      	b.n	8003ce6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	61da      	str	r2, [r3, #28]
 8003c5c:	e029      	b.n	8003cb2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	895b      	ldrh	r3, [r3, #10]
 8003c62:	025b      	lsls	r3, r3, #9
 8003c64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003c66:	e019      	b.n	8003c9c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fcfe 	bl	800366e <get_fat>
 8003c72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d101      	bne.n	8003c80 <dir_sdi+0x88>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e032      	b.n	8003ce6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d904      	bls.n	8003c90 <dir_sdi+0x98>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d301      	bcc.n	8003c94 <dir_sdi+0x9c>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e028      	b.n	8003ce6 <dir_sdi+0xee>
			ofs -= csz;
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d2e1      	bcs.n	8003c68 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003ca4:	6979      	ldr	r1, [r7, #20]
 8003ca6:	6938      	ldr	r0, [r7, #16]
 8003ca8:	f7ff fcc2 	bl	8003630 <clust2sect>
 8003cac:	4602      	mov	r2, r0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <dir_sdi+0xcc>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e010      	b.n	8003ce6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	0a5b      	lsrs	r3, r3, #9
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cde:	441a      	add	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	3320      	adds	r3, #32
 8003d04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <dir_next+0x28>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d14:	d301      	bcc.n	8003d1a <dir_next+0x2c>
 8003d16:	2304      	movs	r3, #4
 8003d18:	e0aa      	b.n	8003e70 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 8098 	bne.w	8003e56 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	8912      	ldrh	r2, [r2, #8]
 8003d40:	4293      	cmp	r3, r2
 8003d42:	f0c0 8088 	bcc.w	8003e56 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	61da      	str	r2, [r3, #28]
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	e08f      	b.n	8003e70 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	0a5b      	lsrs	r3, r3, #9
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	8952      	ldrh	r2, [r2, #10]
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d17a      	bne.n	8003e56 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	4619      	mov	r1, r3
 8003d68:	4610      	mov	r0, r2
 8003d6a:	f7ff fc80 	bl	800366e <get_fat>
 8003d6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d801      	bhi.n	8003d7a <dir_next+0x8c>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e07a      	b.n	8003e70 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d101      	bne.n	8003d86 <dir_next+0x98>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e074      	b.n	8003e70 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d358      	bcc.n	8003e42 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	61da      	str	r2, [r3, #28]
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	e067      	b.n	8003e70 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7ff fe59 	bl	8003a60 <create_chain>
 8003dae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <dir_next+0xcc>
 8003db6:	2307      	movs	r3, #7
 8003db8:	e05a      	b.n	8003e70 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <dir_next+0xd6>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e055      	b.n	8003e70 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d101      	bne.n	8003dd0 <dir_next+0xe2>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e04f      	b.n	8003e70 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fb4d 	bl	8003470 <sync_window>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <dir_next+0xf2>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e047      	b.n	8003e70 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3330      	adds	r3, #48	; 0x30
 8003de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff f977 	bl	80030de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff fc1a 	bl	8003630 <clust2sect>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e02:	e012      	b.n	8003e2a <dir_next+0x13c>
						fs->wflag = 1;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff fb30 	bl	8003470 <sync_window>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <dir_next+0x12c>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e02a      	b.n	8003e70 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	895b      	ldrh	r3, [r3, #10]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d3e6      	bcc.n	8003e04 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad2      	subs	r2, r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff fbf0 	bl	8003630 <clust2sect>
 8003e50:	4602      	mov	r2, r0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003e88:	2100      	movs	r1, #0
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff feb4 	bl	8003bf8 <dir_sdi>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d12b      	bne.n	8003ef2 <dir_alloc+0x7a>
		n = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fb27 	bl	80034f8 <move_window>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d11d      	bne.n	8003ef0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2be5      	cmp	r3, #229	; 0xe5
 8003ebc:	d004      	beq.n	8003ec8 <dir_alloc+0x50>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d102      	bne.n	8003edc <dir_alloc+0x64>
 8003ed6:	e00c      	b.n	8003ef2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003edc:	2101      	movs	r1, #1
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff05 	bl	8003cee <dir_next>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0d7      	beq.n	8003e9e <dir_alloc+0x26>
 8003eee:	e000      	b.n	8003ef2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003ef0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d101      	bne.n	8003efc <dir_alloc+0x84>
 8003ef8:	2307      	movs	r3, #7
 8003efa:	75fb      	strb	r3, [r7, #23]
	return res;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	331a      	adds	r3, #26
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff f83f 	bl	8002f98 <ld_word>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d109      	bne.n	8003f3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f834 	bl	8002f98 <ld_word>
 8003f30:	4603      	mov	r3, r0
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	331a      	adds	r3, #26
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	b292      	uxth	r2, r2
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f857 	bl	800300e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d109      	bne.n	8003f7c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f103 0214 	add.w	r2, r3, #20
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7ff f849 	bl	800300e <st_word>
	}
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003f92:	2100      	movs	r1, #0
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fe2f 	bl	8003bf8 <dir_sdi>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <dir_find+0x24>
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	e03e      	b.n	8004026 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4619      	mov	r1, r3
 8003fae:	6938      	ldr	r0, [r7, #16]
 8003fb0:	f7ff faa2 	bl	80034f8 <move_window>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d12f      	bne.n	800401e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <dir_find+0x4e>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	75fb      	strb	r3, [r7, #23]
 8003fd0:	e028      	b.n	8004024 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	330b      	adds	r3, #11
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	330b      	adds	r3, #11
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <dir_find+0x86>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a18      	ldr	r0, [r3, #32]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3324      	adds	r3, #36	; 0x24
 8003ffc:	220b      	movs	r2, #11
 8003ffe:	4619      	mov	r1, r3
 8004000:	f7ff f888 	bl	8003114 <mem_cmp>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800400a:	2100      	movs	r1, #0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fe6e 	bl	8003cee <dir_next>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0c5      	beq.n	8003fa8 <dir_find+0x24>
 800401c:	e002      	b.n	8004024 <dir_find+0xa0>
		if (res != FR_OK) break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004022:	bf00      	nop

	return res;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800403c:	2101      	movs	r1, #1
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ff1a 	bl	8003e78 <dir_alloc>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d11c      	bne.n	8004088 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4619      	mov	r1, r3
 8004054:	68b8      	ldr	r0, [r7, #8]
 8004056:	f7ff fa4f 	bl	80034f8 <move_window>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d111      	bne.n	8004088 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	2220      	movs	r2, #32
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f836 	bl	80030de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a18      	ldr	r0, [r3, #32]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3324      	adds	r3, #36	; 0x24
 800407a:	220b      	movs	r2, #11
 800407c:	4619      	mov	r1, r3
 800407e:	f7ff f80d 	bl	800309c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2201      	movs	r2, #1
 8004086:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3324      	adds	r3, #36	; 0x24
 80040a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80040aa:	220b      	movs	r2, #11
 80040ac:	2120      	movs	r1, #32
 80040ae:	68b8      	ldr	r0, [r7, #8]
 80040b0:	f7ff f815 	bl	80030de <mem_set>
	si = i = 0; ni = 8;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	2308      	movs	r3, #8
 80040be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	61fa      	str	r2, [r7, #28]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80040ce:	7efb      	ldrb	r3, [r7, #27]
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d94e      	bls.n	8004172 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80040d4:	7efb      	ldrb	r3, [r7, #27]
 80040d6:	2b2f      	cmp	r3, #47	; 0x2f
 80040d8:	d006      	beq.n	80040e8 <create_name+0x54>
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	2b5c      	cmp	r3, #92	; 0x5c
 80040de:	d110      	bne.n	8004102 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80040e0:	e002      	b.n	80040e8 <create_name+0x54>
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b2f      	cmp	r3, #47	; 0x2f
 80040f2:	d0f6      	beq.n	80040e2 <create_name+0x4e>
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b5c      	cmp	r3, #92	; 0x5c
 80040fe:	d0f0      	beq.n	80040e2 <create_name+0x4e>
			break;
 8004100:	e038      	b.n	8004174 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004102:	7efb      	ldrb	r3, [r7, #27]
 8004104:	2b2e      	cmp	r3, #46	; 0x2e
 8004106:	d003      	beq.n	8004110 <create_name+0x7c>
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	d30c      	bcc.n	800412a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b0b      	cmp	r3, #11
 8004114:	d002      	beq.n	800411c <create_name+0x88>
 8004116:	7efb      	ldrb	r3, [r7, #27]
 8004118:	2b2e      	cmp	r3, #46	; 0x2e
 800411a:	d001      	beq.n	8004120 <create_name+0x8c>
 800411c:	2306      	movs	r3, #6
 800411e:	e044      	b.n	80041aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004120:	2308      	movs	r3, #8
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	230b      	movs	r3, #11
 8004126:	617b      	str	r3, [r7, #20]
			continue;
 8004128:	e022      	b.n	8004170 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800412a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800412e:	2b00      	cmp	r3, #0
 8004130:	da04      	bge.n	800413c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004132:	7efb      	ldrb	r3, [r7, #27]
 8004134:	3b80      	subs	r3, #128	; 0x80
 8004136:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <create_name+0x120>)
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800413c:	7efb      	ldrb	r3, [r7, #27]
 800413e:	4619      	mov	r1, r3
 8004140:	481d      	ldr	r0, [pc, #116]	; (80041b8 <create_name+0x124>)
 8004142:	f7ff f80e 	bl	8003162 <chk_chr>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <create_name+0xbc>
 800414c:	2306      	movs	r3, #6
 800414e:	e02c      	b.n	80041aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004150:	7efb      	ldrb	r3, [r7, #27]
 8004152:	2b60      	cmp	r3, #96	; 0x60
 8004154:	d905      	bls.n	8004162 <create_name+0xce>
 8004156:	7efb      	ldrb	r3, [r7, #27]
 8004158:	2b7a      	cmp	r3, #122	; 0x7a
 800415a:	d802      	bhi.n	8004162 <create_name+0xce>
 800415c:	7efb      	ldrb	r3, [r7, #27]
 800415e:	3b20      	subs	r3, #32
 8004160:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	613a      	str	r2, [r7, #16]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	4413      	add	r3, r2
 800416c:	7efa      	ldrb	r2, [r7, #27]
 800416e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004170:	e7a6      	b.n	80040c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004172:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	441a      	add	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <create_name+0xf4>
 8004184:	2306      	movs	r3, #6
 8004186:	e010      	b.n	80041aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2be5      	cmp	r3, #229	; 0xe5
 800418e:	d102      	bne.n	8004196 <create_name+0x102>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2205      	movs	r2, #5
 8004194:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004196:	7efb      	ldrb	r3, [r7, #27]
 8004198:	2b20      	cmp	r3, #32
 800419a:	d801      	bhi.n	80041a0 <create_name+0x10c>
 800419c:	2204      	movs	r2, #4
 800419e:	e000      	b.n	80041a2 <create_name+0x10e>
 80041a0:	2200      	movs	r2, #0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	330b      	adds	r3, #11
 80041a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80041a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	08006150 	.word	0x08006150
 80041b8:	080060fc 	.word	0x080060fc

080041bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80041d0:	e002      	b.n	80041d8 <follow_path+0x1c>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b2f      	cmp	r3, #47	; 0x2f
 80041de:	d0f8      	beq.n	80041d2 <follow_path+0x16>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b5c      	cmp	r3, #92	; 0x5c
 80041e6:	d0f4      	beq.n	80041d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b1f      	cmp	r3, #31
 80041f4:	d80a      	bhi.n	800420c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80041fe:	2100      	movs	r1, #0
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fcf9 	bl	8003bf8 <dir_sdi>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]
 800420a:	e043      	b.n	8004294 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800420c:	463b      	mov	r3, r7
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff3f 	bl	8004094 <create_name>
 8004216:	4603      	mov	r3, r0
 8004218:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d134      	bne.n	800428a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff feaf 	bl	8003f84 <dir_find>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004230:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d127      	bne.n	800428e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800423e:	7afb      	ldrb	r3, [r7, #11]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d122      	bne.n	800428e <follow_path+0xd2>
 8004248:	2305      	movs	r3, #5
 800424a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800424c:	e01f      	b.n	800428e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11c      	bne.n	8004292 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	799b      	ldrb	r3, [r3, #6]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004264:	2305      	movs	r3, #5
 8004266:	75fb      	strb	r3, [r7, #23]
 8004268:	e014      	b.n	8004294 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004278:	4413      	add	r3, r2
 800427a:	4619      	mov	r1, r3
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff fe42 	bl	8003f06 <ld_clust>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004288:	e7c0      	b.n	800420c <follow_path+0x50>
			if (res != FR_OK) break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <follow_path+0xd8>
				break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004292:	bf00      	nop
			}
		}
	}

	return res;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800429e:	b480      	push	{r7}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d031      	beq.n	8004318 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e002      	b.n	80042c2 <get_ldnumber+0x24>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3301      	adds	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d903      	bls.n	80042d2 <get_ldnumber+0x34>
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b3a      	cmp	r3, #58	; 0x3a
 80042d0:	d1f4      	bne.n	80042bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b3a      	cmp	r3, #58	; 0x3a
 80042d8:	d11c      	bne.n	8004314 <get_ldnumber+0x76>
			tp = *path;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	60fa      	str	r2, [r7, #12]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	3b30      	subs	r3, #48	; 0x30
 80042ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	d80e      	bhi.n	8004310 <get_ldnumber+0x72>
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d10a      	bne.n	8004310 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <get_ldnumber+0x72>
					vol = (int)i;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3301      	adds	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e002      	b.n	800431a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004318:	693b      	ldr	r3, [r7, #16]
}
 800431a:	4618      	mov	r0, r3
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	70da      	strb	r2, [r3, #3]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f04f 32ff 	mov.w	r2, #4294967295
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff f8d8 	bl	80034f8 <move_window>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <check_fs+0x2a>
 800434e:	2304      	movs	r3, #4
 8004350:	e038      	b.n	80043c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3330      	adds	r3, #48	; 0x30
 8004356:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe fe1c 	bl	8002f98 <ld_word>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <check_fs+0x48>
 800436c:	2303      	movs	r3, #3
 800436e:	e029      	b.n	80043c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004376:	2be9      	cmp	r3, #233	; 0xe9
 8004378:	d009      	beq.n	800438e <check_fs+0x66>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004380:	2beb      	cmp	r3, #235	; 0xeb
 8004382:	d11e      	bne.n	80043c2 <check_fs+0x9a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800438a:	2b90      	cmp	r3, #144	; 0x90
 800438c:	d119      	bne.n	80043c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3330      	adds	r3, #48	; 0x30
 8004392:	3336      	adds	r3, #54	; 0x36
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe fe17 	bl	8002fc8 <ld_dword>
 800439a:	4603      	mov	r3, r0
 800439c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <check_fs+0xa4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <check_fs+0x82>
 80043a6:	2300      	movs	r3, #0
 80043a8:	e00c      	b.n	80043c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3330      	adds	r3, #48	; 0x30
 80043ae:	3352      	adds	r3, #82	; 0x52
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe fe09 	bl	8002fc8 <ld_dword>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <check_fs+0xa8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d101      	bne.n	80043c2 <check_fs+0x9a>
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80043c2:	2302      	movs	r3, #2
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	00544146 	.word	0x00544146
 80043d0:	33544146 	.word	0x33544146

080043d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b096      	sub	sp, #88	; 0x58
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff ff58 	bl	800429e <get_ldnumber>
 80043ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80043f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da01      	bge.n	80043fa <find_volume+0x26>
 80043f6:	230b      	movs	r3, #11
 80043f8:	e22e      	b.n	8004858 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80043fa:	4aa8      	ldr	r2, [pc, #672]	; (800469c <find_volume+0x2c8>)
 80043fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <find_volume+0x3a>
 800440a:	230c      	movs	r3, #12
 800440c:	e224      	b.n	8004858 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004412:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01a      	beq.n	800445a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe fd17 	bl	8002e5c <disk_status>
 800442e:	4603      	mov	r3, r0
 8004430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10c      	bne.n	800445a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <find_volume+0x82>
 8004446:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004452:	230a      	movs	r3, #10
 8004454:	e200      	b.n	8004858 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004456:	2300      	movs	r3, #0
 8004458:	e1fe      	b.n	8004858 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	b2da      	uxtb	r2, r3
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fd0f 	bl	8002e90 <disk_initialize>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004484:	2303      	movs	r3, #3
 8004486:	e1e7      	b.n	8004858 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <find_volume+0xca>
 800448e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800449a:	230a      	movs	r3, #10
 800449c:	e1dc      	b.n	8004858 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80044a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044a6:	f7ff ff3f 	bl	8004328 <check_fs>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80044b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d14b      	bne.n	8004550 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80044b8:	2300      	movs	r3, #0
 80044ba:	643b      	str	r3, [r7, #64]	; 0x40
 80044bc:	e01f      	b.n	80044fe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80044cc:	4413      	add	r3, r2
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	3304      	adds	r3, #4
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d006      	beq.n	80044e8 <find_volume+0x114>
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	3308      	adds	r3, #8
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fd72 	bl	8002fc8 <ld_dword>
 80044e4:	4602      	mov	r2, r0
 80044e6:	e000      	b.n	80044ea <find_volume+0x116>
 80044e8:	2200      	movs	r2, #0
 80044ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80044f2:	440b      	add	r3, r1
 80044f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80044f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fa:	3301      	adds	r3, #1
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
 80044fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004500:	2b03      	cmp	r3, #3
 8004502:	d9dc      	bls.n	80044be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004504:	2300      	movs	r3, #0
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <find_volume+0x140>
 800450e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004510:	3b01      	subs	r3, #1
 8004512:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800451c:	4413      	add	r3, r2
 800451e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004522:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <find_volume+0x162>
 800452a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800452c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800452e:	f7ff fefb 	bl	8004328 <check_fs>
 8004532:	4603      	mov	r3, r0
 8004534:	e000      	b.n	8004538 <find_volume+0x164>
 8004536:	2303      	movs	r3, #3
 8004538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800453c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004540:	2b01      	cmp	r3, #1
 8004542:	d905      	bls.n	8004550 <find_volume+0x17c>
 8004544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004546:	3301      	adds	r3, #1
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
 800454a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454c:	2b03      	cmp	r3, #3
 800454e:	d9e1      	bls.n	8004514 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004554:	2b04      	cmp	r3, #4
 8004556:	d101      	bne.n	800455c <find_volume+0x188>
 8004558:	2301      	movs	r3, #1
 800455a:	e17d      	b.n	8004858 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800455c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004560:	2b01      	cmp	r3, #1
 8004562:	d901      	bls.n	8004568 <find_volume+0x194>
 8004564:	230d      	movs	r3, #13
 8004566:	e177      	b.n	8004858 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	3330      	adds	r3, #48	; 0x30
 800456c:	330b      	adds	r3, #11
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fd12 	bl	8002f98 <ld_word>
 8004574:	4603      	mov	r3, r0
 8004576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457a:	d001      	beq.n	8004580 <find_volume+0x1ac>
 800457c:	230d      	movs	r3, #13
 800457e:	e16b      	b.n	8004858 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	3330      	adds	r3, #48	; 0x30
 8004584:	3316      	adds	r3, #22
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fd06 	bl	8002f98 <ld_word>
 800458c:	4603      	mov	r3, r0
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <find_volume+0x1d0>
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	3330      	adds	r3, #48	; 0x30
 800459a:	3324      	adds	r3, #36	; 0x24
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fd13 	bl	8002fc8 <ld_dword>
 80045a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	789b      	ldrb	r3, [r3, #2]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d005      	beq.n	80045c8 <find_volume+0x1f4>
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	789b      	ldrb	r3, [r3, #2]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d001      	beq.n	80045c8 <find_volume+0x1f4>
 80045c4:	230d      	movs	r3, #13
 80045c6:	e147      	b.n	8004858 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	789b      	ldrb	r3, [r3, #2]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b29a      	uxth	r2, r3
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	895b      	ldrh	r3, [r3, #10]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <find_volume+0x228>
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	895b      	ldrh	r3, [r3, #10]
 80045ee:	461a      	mov	r2, r3
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	895b      	ldrh	r3, [r3, #10]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <find_volume+0x22c>
 80045fc:	230d      	movs	r3, #13
 80045fe:	e12b      	b.n	8004858 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	3330      	adds	r3, #48	; 0x30
 8004604:	3311      	adds	r3, #17
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fcc6 	bl	8002f98 <ld_word>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	891b      	ldrh	r3, [r3, #8]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <find_volume+0x252>
 8004622:	230d      	movs	r3, #13
 8004624:	e118      	b.n	8004858 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	3330      	adds	r3, #48	; 0x30
 800462a:	3313      	adds	r3, #19
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fcb3 	bl	8002f98 <ld_word>
 8004632:	4603      	mov	r3, r0
 8004634:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <find_volume+0x276>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	3330      	adds	r3, #48	; 0x30
 8004640:	3320      	adds	r3, #32
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fcc0 	bl	8002fc8 <ld_dword>
 8004648:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464c:	3330      	adds	r3, #48	; 0x30
 800464e:	330e      	adds	r3, #14
 8004650:	4618      	mov	r0, r3
 8004652:	f7fe fca1 	bl	8002f98 <ld_word>
 8004656:	4603      	mov	r3, r0
 8004658:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800465a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <find_volume+0x290>
 8004660:	230d      	movs	r3, #13
 8004662:	e0f9      	b.n	8004858 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004664:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	4413      	add	r3, r2
 800466a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800466c:	8912      	ldrh	r2, [r2, #8]
 800466e:	0912      	lsrs	r2, r2, #4
 8004670:	b292      	uxth	r2, r2
 8004672:	4413      	add	r3, r2
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	429a      	cmp	r2, r3
 800467c:	d201      	bcs.n	8004682 <find_volume+0x2ae>
 800467e:	230d      	movs	r3, #13
 8004680:	e0ea      	b.n	8004858 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800468a:	8952      	ldrh	r2, [r2, #10]
 800468c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <find_volume+0x2cc>
 8004698:	230d      	movs	r3, #13
 800469a:	e0dd      	b.n	8004858 <find_volume+0x484>
 800469c:	200001ac 	.word	0x200001ac
		fmt = FS_FAT32;
 80046a0:	2303      	movs	r3, #3
 80046a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d802      	bhi.n	80046b6 <find_volume+0x2e2>
 80046b0:	2302      	movs	r3, #2
 80046b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80046bc:	4293      	cmp	r3, r2
 80046be:	d802      	bhi.n	80046c6 <find_volume+0x2f2>
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1c9a      	adds	r2, r3, #2
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046d2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80046d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d8:	441a      	add	r2, r3
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80046de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	441a      	add	r2, r3
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80046e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d11e      	bne.n	800472e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	3330      	adds	r3, #48	; 0x30
 80046f4:	332a      	adds	r3, #42	; 0x2a
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fc4e 	bl	8002f98 <ld_word>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <find_volume+0x332>
 8004702:	230d      	movs	r3, #13
 8004704:	e0a8      	b.n	8004858 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	891b      	ldrh	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <find_volume+0x33e>
 800470e:	230d      	movs	r3, #13
 8004710:	e0a2      	b.n	8004858 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	3330      	adds	r3, #48	; 0x30
 8004716:	332c      	adds	r3, #44	; 0x2c
 8004718:	4618      	mov	r0, r3
 800471a:	f7fe fc55 	bl	8002fc8 <ld_dword>
 800471e:	4602      	mov	r2, r0
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	647b      	str	r3, [r7, #68]	; 0x44
 800472c:	e01f      	b.n	800476e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	891b      	ldrh	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <find_volume+0x366>
 8004736:	230d      	movs	r3, #13
 8004738:	e08e      	b.n	8004858 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	441a      	add	r2, r3
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004746:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800474a:	2b02      	cmp	r3, #2
 800474c:	d103      	bne.n	8004756 <find_volume+0x382>
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	e00a      	b.n	800476c <find_volume+0x398>
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	085a      	lsrs	r2, r3, #1
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800476c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004774:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004778:	0a5b      	lsrs	r3, r3, #9
 800477a:	429a      	cmp	r2, r3
 800477c:	d201      	bcs.n	8004782 <find_volume+0x3ae>
 800477e:	230d      	movs	r3, #13
 8004780:	e06a      	b.n	8004858 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	611a      	str	r2, [r3, #16]
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800479c:	2b03      	cmp	r3, #3
 800479e:	d149      	bne.n	8004834 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	3330      	adds	r3, #48	; 0x30
 80047a4:	3330      	adds	r3, #48	; 0x30
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fbf6 	bl	8002f98 <ld_word>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d140      	bne.n	8004834 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	3301      	adds	r3, #1
 80047b6:	4619      	mov	r1, r3
 80047b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047ba:	f7fe fe9d 	bl	80034f8 <move_window>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d137      	bne.n	8004834 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	2200      	movs	r2, #0
 80047c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	3330      	adds	r3, #48	; 0x30
 80047ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fbe0 	bl	8002f98 <ld_word>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d127      	bne.n	8004834 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	3330      	adds	r3, #48	; 0x30
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe fbed 	bl	8002fc8 <ld_dword>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <find_volume+0x48c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d11e      	bne.n	8004834 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	3330      	adds	r3, #48	; 0x30
 80047fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fbe2 	bl	8002fc8 <ld_dword>
 8004804:	4603      	mov	r3, r0
 8004806:	4a17      	ldr	r2, [pc, #92]	; (8004864 <find_volume+0x490>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d113      	bne.n	8004834 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	3330      	adds	r3, #48	; 0x30
 8004810:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe fbd7 	bl	8002fc8 <ld_dword>
 800481a:	4602      	mov	r2, r0
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	3330      	adds	r3, #48	; 0x30
 8004824:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fbcd 	bl	8002fc8 <ld_dword>
 800482e:	4602      	mov	r2, r0
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800483a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <find_volume+0x494>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <find_volume+0x494>)
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <find_volume+0x494>)
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004852:	f7fe fde9 	bl	8003428 <clear_lock>
#endif
	return FR_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3758      	adds	r7, #88	; 0x58
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	41615252 	.word	0x41615252
 8004864:	61417272 	.word	0x61417272
 8004868:	200001b0 	.word	0x200001b0

0800486c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004876:	2309      	movs	r3, #9
 8004878:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01c      	beq.n	80048ba <validate+0x4e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d018      	beq.n	80048ba <validate+0x4e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d013      	beq.n	80048ba <validate+0x4e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	889a      	ldrh	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	88db      	ldrh	r3, [r3, #6]
 800489c:	429a      	cmp	r2, r3
 800489e:	d10c      	bne.n	80048ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fad8 	bl	8002e5c <disk_status>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <validate+0x4e>
			res = FR_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <validate+0x5a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e000      	b.n	80048c8 <validate+0x5c>
 80048c6:	2300      	movs	r3, #0
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	6013      	str	r3, [r2, #0]
	return res;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80048ea:	f107 0310 	add.w	r3, r7, #16
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fcd5 	bl	800429e <get_ldnumber>
 80048f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	da01      	bge.n	8004900 <f_mount+0x28>
 80048fc:	230b      	movs	r3, #11
 80048fe:	e02b      	b.n	8004958 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <f_mount+0x88>)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004908:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004910:	69b8      	ldr	r0, [r7, #24]
 8004912:	f7fe fd89 	bl	8003428 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	490d      	ldr	r1, [pc, #52]	; (8004960 <f_mount+0x88>)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <f_mount+0x66>
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <f_mount+0x6a>
 800493e:	2300      	movs	r3, #0
 8004940:	e00a      	b.n	8004958 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004942:	f107 010c 	add.w	r1, r7, #12
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	2200      	movs	r2, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fd41 	bl	80043d4 <find_volume>
 8004952:	4603      	mov	r3, r0
 8004954:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004956:	7dfb      	ldrb	r3, [r7, #23]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200001ac 	.word	0x200001ac

08004964 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b098      	sub	sp, #96	; 0x60
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <f_open+0x18>
 8004978:	2309      	movs	r3, #9
 800497a:	e1ad      	b.n	8004cd8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004982:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004984:	79fa      	ldrb	r2, [r7, #7]
 8004986:	f107 0110 	add.w	r1, r7, #16
 800498a:	f107 0308 	add.w	r3, r7, #8
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fd20 	bl	80043d4 <find_volume>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800499a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 8191 	bne.w	8004cc6 <f_open+0x362>
		dj.obj.fs = fs;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fc03 	bl	80041bc <follow_path>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80049bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11a      	bne.n	80049fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80049c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da03      	bge.n	80049d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80049ce:	2306      	movs	r3, #6
 80049d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80049d4:	e011      	b.n	80049fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fbd2 	bl	8003198 <chk_lock>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	f003 031c 	and.w	r3, r3, #28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d07f      	beq.n	8004b04 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d017      	beq.n	8004a3c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d10e      	bne.n	8004a32 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004a14:	f7fe fc1c 	bl	8003250 <enq_lock>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <f_open+0xc8>
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fb03 	bl	800402e <dir_register>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	e000      	b.n	8004a2e <f_open+0xca>
 8004a2c:	2312      	movs	r3, #18
 8004a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f043 0308 	orr.w	r3, r3, #8
 8004a38:	71fb      	strb	r3, [r7, #7]
 8004a3a:	e010      	b.n	8004a5e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004a3c:	7ebb      	ldrb	r3, [r7, #26]
 8004a3e:	f003 0311 	and.w	r3, r3, #17
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <f_open+0xea>
					res = FR_DENIED;
 8004a46:	2307      	movs	r3, #7
 8004a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004a4c:	e007      	b.n	8004a5e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <f_open+0xfa>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d168      	bne.n	8004b38 <f_open+0x1d4>
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d063      	beq.n	8004b38 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004a70:	f7fd fcb2 	bl	80023d8 <get_fattime>
 8004a74:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a78:	330e      	adds	r3, #14
 8004a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe fae1 	bl	8003044 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	3316      	adds	r3, #22
 8004a86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe fadb 	bl	8003044 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	330b      	adds	r3, #11
 8004a92:	2220      	movs	r2, #32
 8004a94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fa32 	bl	8003f06 <ld_clust>
 8004aa2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fa4a 	bl	8003f44 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	331c      	adds	r3, #28
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe fac4 	bl	8003044 <st_dword>
					fs->wflag = 1;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d037      	beq.n	8004b38 <f_open+0x1d4>
						dw = fs->winsect;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004ace:	f107 0314 	add.w	r3, r7, #20
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe ff5d 	bl	8003996 <remove_chain>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d126      	bne.n	8004b38 <f_open+0x1d4>
							res = move_window(fs, dw);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fd02 	bl	80034f8 <move_window>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004afe:	3a01      	subs	r2, #1
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	e019      	b.n	8004b38 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d115      	bne.n	8004b38 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004b0c:	7ebb      	ldrb	r3, [r7, #26]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <f_open+0x1ba>
					res = FR_NO_FILE;
 8004b16:	2304      	movs	r3, #4
 8004b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004b1c:	e00c      	b.n	8004b38 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <f_open+0x1d4>
 8004b28:	7ebb      	ldrb	r3, [r7, #26]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <f_open+0x1d4>
						res = FR_DENIED;
 8004b32:	2307      	movs	r3, #7
 8004b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d128      	bne.n	8004b92 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe fb8b 	bl	8003294 <inc_lock>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <f_open+0x22e>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 8095 	bne.w	8004cc6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff f9af 	bl	8003f06 <ld_clust>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	331c      	adds	r3, #28
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fa08 	bl	8002fc8 <ld_dword>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	88da      	ldrh	r2, [r3, #6]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	79fa      	ldrb	r2, [r7, #7]
 8004bd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3330      	adds	r3, #48	; 0x30
 8004bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fa72 	bl	80030de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d060      	beq.n	8004cc6 <f_open+0x362>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05c      	beq.n	8004cc6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	895b      	ldrh	r3, [r3, #10]
 8004c18:	025b      	lsls	r3, r3, #9
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	657b      	str	r3, [r7, #84]	; 0x54
 8004c28:	e016      	b.n	8004c58 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fd1d 	bl	800366e <get_fat>
 8004c34:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d802      	bhi.n	8004c42 <f_open+0x2de>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d102      	bne.n	8004c50 <f_open+0x2ec>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	657b      	str	r3, [r7, #84]	; 0x54
 8004c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <f_open+0x304>
 8004c60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d8e0      	bhi.n	8004c2a <f_open+0x2c6>
				}
				fp->clust = clst;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d127      	bne.n	8004cc6 <f_open+0x362>
 8004c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d022      	beq.n	8004cc6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe fcd3 	bl	8003630 <clust2sect>
 8004c8a:	6478      	str	r0, [r7, #68]	; 0x44
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <f_open+0x336>
						res = FR_INT_ERR;
 8004c92:	2302      	movs	r3, #2
 8004c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004c98:	e015      	b.n	8004cc6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	0a5a      	lsrs	r2, r3, #9
 8004c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	7858      	ldrb	r0, [r3, #1]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1a      	ldr	r2, [r3, #32]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f7fe f911 	bl	8002edc <disk_read>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <f_open+0x362>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <f_open+0x370>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3760      	adds	r7, #96	; 0x60
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08e      	sub	sp, #56	; 0x38
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f107 0214 	add.w	r2, r7, #20
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fdb3 	bl	800486c <validate>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <f_read+0x44>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	7d5b      	ldrb	r3, [r3, #21]
 8004d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <f_read+0x4a>
 8004d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d28:	e115      	b.n	8004f56 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	7d1b      	ldrb	r3, [r3, #20]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <f_read+0x5a>
 8004d36:	2307      	movs	r3, #7
 8004d38:	e10d      	b.n	8004f56 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	f240 80fe 	bls.w	8004f4c <f_read+0x26c>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004d54:	e0fa      	b.n	8004f4c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 80c6 	bne.w	8004ef0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	0a5b      	lsrs	r3, r3, #9
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	8952      	ldrh	r2, [r2, #10]
 8004d6e:	3a01      	subs	r2, #1
 8004d70:	4013      	ands	r3, r2
 8004d72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d12f      	bne.n	8004dda <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
 8004d88:	e013      	b.n	8004db2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	4619      	mov	r1, r3
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7fe fef9 	bl	8003b90 <clmt_clust>
 8004d9e:	6338      	str	r0, [r7, #48]	; 0x30
 8004da0:	e007      	b.n	8004db2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f7fe fc5f 	bl	800366e <get_fat>
 8004db0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d804      	bhi.n	8004dc2 <f_read+0xe2>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	755a      	strb	r2, [r3, #21]
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0c9      	b.n	8004f56 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d104      	bne.n	8004dd4 <f_read+0xf4>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	755a      	strb	r2, [r3, #21]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0c0      	b.n	8004f56 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f7fe fc24 	bl	8003630 <clust2sect>
 8004de8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <f_read+0x11a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2202      	movs	r2, #2
 8004df4:	755a      	strb	r2, [r3, #21]
 8004df6:	2302      	movs	r3, #2
 8004df8:	e0ad      	b.n	8004f56 <f_read+0x276>
			sect += csect;
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	0a5b      	lsrs	r3, r3, #9
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d039      	beq.n	8004e82 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	4413      	add	r3, r2
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	8952      	ldrh	r2, [r2, #10]
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d905      	bls.n	8004e28 <f_read+0x148>
					cc = fs->csize - csect;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	895b      	ldrh	r3, [r3, #10]
 8004e20:	461a      	mov	r2, r3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	7858      	ldrb	r0, [r3, #1]
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e32:	f7fe f853 	bl	8002edc <disk_read>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <f_read+0x166>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	755a      	strb	r2, [r3, #21]
 8004e42:	2301      	movs	r3, #1
 8004e44:	e087      	b.n	8004f56 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	7d1b      	ldrb	r3, [r3, #20]
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da14      	bge.n	8004e7a <f_read+0x19a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d90d      	bls.n	8004e7a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	025b      	lsls	r3, r3, #9
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	18d0      	adds	r0, r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3330      	adds	r3, #48	; 0x30
 8004e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7fe f911 	bl	800309c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004e80:	e050      	b.n	8004f24 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d02e      	beq.n	8004eea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	7d1b      	ldrb	r3, [r3, #20]
 8004e90:	b25b      	sxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	da18      	bge.n	8004ec8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	7858      	ldrb	r0, [r3, #1]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f7fe f839 	bl	8002f1c <disk_write>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <f_read+0x1da>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	755a      	strb	r2, [r3, #21]
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e04d      	b.n	8004f56 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	7d1b      	ldrb	r3, [r3, #20]
 8004ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	7858      	ldrb	r0, [r3, #1]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	f7fe f801 	bl	8002edc <disk_read>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <f_read+0x20a>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	755a      	strb	r2, [r3, #21]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e035      	b.n	8004f56 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d901      	bls.n	8004f0a <f_read+0x22a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f18:	4413      	add	r3, r2
 8004f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f20:	f7fe f8bc 	bl	800309c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	4413      	add	r3, r2
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	619a      	str	r2, [r3, #24]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	441a      	add	r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f47f af01 	bne.w	8004d56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3738      	adds	r7, #56	; 0x38
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b08c      	sub	sp, #48	; 0x30
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f107 0210 	add.w	r2, r7, #16
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fc74 	bl	800486c <validate>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <f_write+0x44>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	7d5b      	ldrb	r3, [r3, #21]
 8004f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <f_write+0x4a>
 8004fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fa6:	e14b      	b.n	8005240 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	7d1b      	ldrb	r3, [r3, #20]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <f_write+0x5a>
 8004fb4:	2307      	movs	r3, #7
 8004fb6:	e143      	b.n	8005240 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	441a      	add	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	f080 812d 	bcs.w	8005224 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004fd2:	e127      	b.n	8005224 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 80e3 	bne.w	80051a8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	0a5b      	lsrs	r3, r3, #9
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	8952      	ldrh	r2, [r2, #10]
 8004fec:	3a01      	subs	r2, #1
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d143      	bne.n	8005080 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10c      	bne.n	800501a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11a      	bne.n	8005042 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fd25 	bl	8003a60 <create_chain>
 8005016:	62b8      	str	r0, [r7, #40]	; 0x28
 8005018:	e013      	b.n	8005042 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	4619      	mov	r1, r3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7fe fdb1 	bl	8003b90 <clmt_clust>
 800502e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005030:	e007      	b.n	8005042 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fe fd10 	bl	8003a60 <create_chain>
 8005040:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80f2 	beq.w	800522e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	2b01      	cmp	r3, #1
 800504e:	d104      	bne.n	800505a <f_write+0xfc>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2202      	movs	r2, #2
 8005054:	755a      	strb	r2, [r3, #21]
 8005056:	2302      	movs	r3, #2
 8005058:	e0f2      	b.n	8005240 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d104      	bne.n	800506c <f_write+0x10e>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	755a      	strb	r2, [r3, #21]
 8005068:	2301      	movs	r3, #1
 800506a:	e0e9      	b.n	8005240 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005070:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <f_write+0x122>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	7d1b      	ldrb	r3, [r3, #20]
 8005084:	b25b      	sxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	da18      	bge.n	80050bc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	7858      	ldrb	r0, [r3, #1]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	2301      	movs	r3, #1
 800509a:	f7fd ff3f 	bl	8002f1c <disk_write>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <f_write+0x150>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	755a      	strb	r2, [r3, #21]
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0c8      	b.n	8005240 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	7d1b      	ldrb	r3, [r3, #20]
 80050b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f7fe fab3 	bl	8003630 <clust2sect>
 80050ca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <f_write+0x17e>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2202      	movs	r2, #2
 80050d6:	755a      	strb	r2, [r3, #21]
 80050d8:	2302      	movs	r3, #2
 80050da:	e0b1      	b.n	8005240 <f_write+0x2e2>
			sect += csect;
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	0a5b      	lsrs	r3, r3, #9
 80050e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d03c      	beq.n	800516a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	4413      	add	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	8952      	ldrh	r2, [r2, #10]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d905      	bls.n	800510a <f_write+0x1ac>
					cc = fs->csize - csect;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	895b      	ldrh	r3, [r3, #10]
 8005102:	461a      	mov	r2, r3
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	7858      	ldrb	r0, [r3, #1]
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	69f9      	ldr	r1, [r7, #28]
 8005114:	f7fd ff02 	bl	8002f1c <disk_write>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <f_write+0x1ca>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	755a      	strb	r2, [r3, #21]
 8005124:	2301      	movs	r3, #1
 8005126:	e08b      	b.n	8005240 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	429a      	cmp	r2, r3
 8005134:	d915      	bls.n	8005162 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1a      	ldr	r2, [r3, #32]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	025b      	lsls	r3, r3, #9
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514e:	4619      	mov	r1, r3
 8005150:	f7fd ffa4 	bl	800309c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	7d1b      	ldrb	r3, [r3, #20]
 8005158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	025b      	lsls	r3, r3, #9
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005168:	e03f      	b.n	80051ea <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	d016      	beq.n	80051a2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800517c:	429a      	cmp	r2, r3
 800517e:	d210      	bcs.n	80051a2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	7858      	ldrb	r0, [r3, #1]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800518a:	2301      	movs	r3, #1
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	f7fd fea5 	bl	8002edc <disk_read>
 8005192:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	755a      	strb	r2, [r3, #21]
 800519e:	2301      	movs	r3, #1
 80051a0:	e04e      	b.n	8005240 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d901      	bls.n	80051c2 <f_write+0x264>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d0:	4413      	add	r3, r2
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	69f9      	ldr	r1, [r7, #28]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd ff60 	bl	800309c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	7d1b      	ldrb	r3, [r3, #20]
 80051e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	4413      	add	r3, r2
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	441a      	add	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	619a      	str	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	429a      	cmp	r2, r3
 8005208:	bf38      	it	cc
 800520a:	461a      	movcc	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	441a      	add	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f47f aed4 	bne.w	8004fd4 <f_write+0x76>
 800522c:	e000      	b.n	8005230 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800522e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	7d1b      	ldrb	r3, [r3, #20]
 8005234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3730      	adds	r7, #48	; 0x30
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f107 0208 	add.w	r2, r7, #8
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fb07 	bl	800486c <validate>
 800525e:	4603      	mov	r3, r0
 8005260:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d168      	bne.n	800533a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7d1b      	ldrb	r3, [r3, #20]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d062      	beq.n	800533a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7d1b      	ldrb	r3, [r3, #20]
 8005278:	b25b      	sxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	da15      	bge.n	80052aa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	7858      	ldrb	r0, [r3, #1]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	2301      	movs	r3, #1
 800528e:	f7fd fe45 	bl	8002f1c <disk_write>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <f_sync+0x54>
 8005298:	2301      	movs	r3, #1
 800529a:	e04f      	b.n	800533c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	7d1b      	ldrb	r3, [r3, #20]
 80052a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80052aa:	f7fd f895 	bl	80023d8 <get_fattime>
 80052ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fe f91d 	bl	80034f8 <move_window>
 80052be:	4603      	mov	r3, r0
 80052c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d138      	bne.n	800533a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	330b      	adds	r3, #11
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	330b      	adds	r3, #11
 80052d8:	f042 0220 	orr.w	r2, r2, #32
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	461a      	mov	r2, r3
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	f7fe fe2a 	bl	8003f44 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f103 021c 	add.w	r2, r3, #28
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f7fd fea1 	bl	8003044 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3316      	adds	r3, #22
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	4618      	mov	r0, r3
 800530a:	f7fd fe9b 	bl	8003044 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3312      	adds	r3, #18
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f7fd fe7a 	bl	800300e <st_word>
					fs->wflag = 1;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2201      	movs	r2, #1
 800531e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe f916 	bl	8003554 <sync_fs>
 8005328:	4603      	mov	r3, r0
 800532a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	7d1b      	ldrb	r3, [r3, #20]
 8005330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800533a:	7dfb      	ldrb	r3, [r7, #23]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff7b 	bl	8005248 <f_sync>
 8005352:	4603      	mov	r3, r0
 8005354:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d118      	bne.n	800538e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f107 0208 	add.w	r2, r7, #8
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fa81 	bl	800486c <validate>
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10c      	bne.n	800538e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe f819 	bl	80033b0 <dec_lock>
 800537e:	4603      	mov	r3, r0
 8005380:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b092      	sub	sp, #72	; 0x48
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80053a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80053a8:	f107 030c 	add.w	r3, r7, #12
 80053ac:	2200      	movs	r2, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff f810 	bl	80043d4 <find_volume>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80053ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f040 8099 	bne.w	80054f6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80053c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	3b02      	subs	r3, #2
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d804      	bhi.n	80053e2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e089      	b.n	80054f6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d128      	bne.n	8005440 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80053ee:	2302      	movs	r3, #2
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80053f6:	f107 0314 	add.w	r3, r7, #20
 80053fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fe f936 	bl	800366e <get_fat>
 8005402:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d103      	bne.n	8005414 <f_getfree+0x7c>
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005412:	e063      	b.n	80054dc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d103      	bne.n	8005422 <f_getfree+0x8a>
 800541a:	2302      	movs	r3, #2
 800541c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005420:	e05c      	b.n	80054dc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <f_getfree+0x96>
 8005428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542a:	3301      	adds	r3, #1
 800542c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005430:	3301      	adds	r3, #1
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800543a:	429a      	cmp	r2, r3
 800543c:	d3db      	bcc.n	80053f6 <f_getfree+0x5e>
 800543e:	e04d      	b.n	80054dc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
 8005450:	2300      	movs	r3, #0
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	2b00      	cmp	r3, #0
 8005458:	d113      	bne.n	8005482 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800545a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	63ba      	str	r2, [r7, #56]	; 0x38
 8005462:	4619      	mov	r1, r3
 8005464:	f7fe f848 	bl	80034f8 <move_window>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800546e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005472:	2b00      	cmp	r3, #0
 8005474:	d131      	bne.n	80054da <f_getfree+0x142>
							p = fs->win;
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	3330      	adds	r3, #48	; 0x30
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800547c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d10f      	bne.n	80054aa <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800548a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800548c:	f7fd fd84 	bl	8002f98 <ld_word>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <f_getfree+0x104>
 8005496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005498:	3301      	adds	r3, #1
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	3302      	adds	r3, #2
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a4:	3b02      	subs	r3, #2
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	e010      	b.n	80054cc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80054aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ac:	f7fd fd8c 	bl	8002fc8 <ld_dword>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <f_getfree+0x128>
 80054ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054bc:	3301      	adds	r3, #1
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	3304      	adds	r3, #4
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	3b04      	subs	r3, #4
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	3b01      	subs	r3, #1
 80054d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1bd      	bne.n	8005454 <f_getfree+0xbc>
 80054d8:	e000      	b.n	80054dc <f_getfree+0x144>
							if (res != FR_OK) break;
 80054da:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	791a      	ldrb	r2, [r3, #4]
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80054f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3748      	adds	r7, #72	; 0x48
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b088      	sub	sp, #32
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005516:	e01b      	b.n	8005550 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	f107 0114 	add.w	r1, r7, #20
 8005520:	2201      	movs	r2, #1
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fbdc 	bl	8004ce0 <f_read>
		if (rc != 1) break;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d116      	bne.n	800555c <f_gets+0x5a>
		c = s[0];
 800552e:	7d3b      	ldrb	r3, [r7, #20]
 8005530:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	2b0d      	cmp	r3, #13
 8005536:	d100      	bne.n	800553a <f_gets+0x38>
 8005538:	e00a      	b.n	8005550 <f_gets+0x4e>
		*p++ = c;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	61ba      	str	r2, [r7, #24]
 8005540:	7dfa      	ldrb	r2, [r7, #23]
 8005542:	701a      	strb	r2, [r3, #0]
		n++;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	3301      	adds	r3, #1
 8005548:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2b0a      	cmp	r3, #10
 800554e:	d007      	beq.n	8005560 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3b01      	subs	r3, #1
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	429a      	cmp	r2, r3
 8005558:	dbde      	blt.n	8005518 <f_gets+0x16>
 800555a:	e002      	b.n	8005562 <f_gets+0x60>
		if (rc != 1) break;
 800555c:	bf00      	nop
 800555e:	e000      	b.n	8005562 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005560:	bf00      	nop
	}
	*p = 0;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <f_gets+0x70>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	e000      	b.n	8005574 <f_gets+0x72>
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005592:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 8005594:	7a5b      	ldrb	r3, [r3, #9]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d131      	bne.n	8005600 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800559c:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 800559e:	7a5b      	ldrb	r3, [r3, #9]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80055aa:	4b19      	ldr	r3, [pc, #100]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 80055ac:	7a5b      	ldrb	r3, [r3, #9]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4a17      	ldr	r2, [pc, #92]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 80055bc:	7a5b      	ldrb	r3, [r3, #9]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	4b13      	ldr	r3, [pc, #76]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 80055c4:	4413      	add	r3, r2
 80055c6:	79fa      	ldrb	r2, [r7, #7]
 80055c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 80055cc:	7a5b      	ldrb	r3, [r3, #9]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	b2d1      	uxtb	r1, r2
 80055d4:	4a0e      	ldr	r2, [pc, #56]	; (8005610 <FATFS_LinkDriverEx+0x94>)
 80055d6:	7251      	strb	r1, [r2, #9]
 80055d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80055da:	7dbb      	ldrb	r3, [r7, #22]
 80055dc:	3330      	adds	r3, #48	; 0x30
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	3301      	adds	r3, #1
 80055e8:	223a      	movs	r2, #58	; 0x3a
 80055ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	3302      	adds	r3, #2
 80055f0:	222f      	movs	r2, #47	; 0x2f
 80055f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	3303      	adds	r3, #3
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
}
 8005602:	4618      	mov	r0, r3
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	200001d4 	.word	0x200001d4

08005614 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800561e:	2200      	movs	r2, #0
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff ffaa 	bl	800557c <FATFS_LinkDriverEx>
 8005628:	4603      	mov	r3, r0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000024 	.word	0x20000024

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4d0d      	ldr	r5, [pc, #52]	; (8005678 <__libc_init_array+0x38>)
 8005644:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	2600      	movs	r6, #0
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	4d0b      	ldr	r5, [pc, #44]	; (8005680 <__libc_init_array+0x40>)
 8005652:	4c0c      	ldr	r4, [pc, #48]	; (8005684 <__libc_init_array+0x44>)
 8005654:	f000 fc68 	bl	8005f28 <_init>
 8005658:	1b64      	subs	r4, r4, r5
 800565a:	10a4      	asrs	r4, r4, #2
 800565c:	2600      	movs	r6, #0
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f855 3b04 	ldr.w	r3, [r5], #4
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	0800620c 	.word	0x0800620c
 800567c:	0800620c 	.word	0x0800620c
 8005680:	0800620c 	.word	0x0800620c
 8005684:	08006210 	.word	0x08006210

08005688 <memset>:
 8005688:	4402      	add	r2, r0
 800568a:	4603      	mov	r3, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	d100      	bne.n	8005692 <memset+0xa>
 8005690:	4770      	bx	lr
 8005692:	f803 1b01 	strb.w	r1, [r3], #1
 8005696:	e7f9      	b.n	800568c <memset+0x4>

08005698 <_vsniprintf_r>:
 8005698:	b530      	push	{r4, r5, lr}
 800569a:	1e14      	subs	r4, r2, #0
 800569c:	4605      	mov	r5, r0
 800569e:	b09b      	sub	sp, #108	; 0x6c
 80056a0:	4618      	mov	r0, r3
 80056a2:	da05      	bge.n	80056b0 <_vsniprintf_r+0x18>
 80056a4:	238b      	movs	r3, #139	; 0x8b
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	b01b      	add	sp, #108	; 0x6c
 80056ae:	bd30      	pop	{r4, r5, pc}
 80056b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80056b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80056b8:	bf14      	ite	ne
 80056ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80056be:	4623      	moveq	r3, r4
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056c8:	9100      	str	r1, [sp, #0]
 80056ca:	9104      	str	r1, [sp, #16]
 80056cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80056d0:	4602      	mov	r2, r0
 80056d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056d4:	4669      	mov	r1, sp
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 f874 	bl	80057c4 <_svfiprintf_r>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	bfbc      	itt	lt
 80056e0:	238b      	movlt	r3, #139	; 0x8b
 80056e2:	602b      	strlt	r3, [r5, #0]
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	d0e1      	beq.n	80056ac <_vsniprintf_r+0x14>
 80056e8:	9b00      	ldr	r3, [sp, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e7dd      	b.n	80056ac <_vsniprintf_r+0x14>

080056f0 <vsniprintf>:
 80056f0:	b507      	push	{r0, r1, r2, lr}
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	460a      	mov	r2, r1
 80056f8:	4601      	mov	r1, r0
 80056fa:	4803      	ldr	r0, [pc, #12]	; (8005708 <vsniprintf+0x18>)
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f7ff ffcb 	bl	8005698 <_vsniprintf_r>
 8005702:	b003      	add	sp, #12
 8005704:	f85d fb04 	ldr.w	pc, [sp], #4
 8005708:	20000024 	.word	0x20000024

0800570c <__ssputs_r>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	688e      	ldr	r6, [r1, #8]
 8005712:	429e      	cmp	r6, r3
 8005714:	4682      	mov	sl, r0
 8005716:	460c      	mov	r4, r1
 8005718:	4690      	mov	r8, r2
 800571a:	461f      	mov	r7, r3
 800571c:	d838      	bhi.n	8005790 <__ssputs_r+0x84>
 800571e:	898a      	ldrh	r2, [r1, #12]
 8005720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005724:	d032      	beq.n	800578c <__ssputs_r+0x80>
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	6909      	ldr	r1, [r1, #16]
 800572a:	eba5 0901 	sub.w	r9, r5, r1
 800572e:	6965      	ldr	r5, [r4, #20]
 8005730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005738:	3301      	adds	r3, #1
 800573a:	444b      	add	r3, r9
 800573c:	106d      	asrs	r5, r5, #1
 800573e:	429d      	cmp	r5, r3
 8005740:	bf38      	it	cc
 8005742:	461d      	movcc	r5, r3
 8005744:	0553      	lsls	r3, r2, #21
 8005746:	d531      	bpl.n	80057ac <__ssputs_r+0xa0>
 8005748:	4629      	mov	r1, r5
 800574a:	f000 fb47 	bl	8005ddc <_malloc_r>
 800574e:	4606      	mov	r6, r0
 8005750:	b950      	cbnz	r0, 8005768 <__ssputs_r+0x5c>
 8005752:	230c      	movs	r3, #12
 8005754:	f8ca 3000 	str.w	r3, [sl]
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	6921      	ldr	r1, [r4, #16]
 800576a:	464a      	mov	r2, r9
 800576c:	f000 fabe 	bl	8005cec <memcpy>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	6126      	str	r6, [r4, #16]
 800577e:	6165      	str	r5, [r4, #20]
 8005780:	444e      	add	r6, r9
 8005782:	eba5 0509 	sub.w	r5, r5, r9
 8005786:	6026      	str	r6, [r4, #0]
 8005788:	60a5      	str	r5, [r4, #8]
 800578a:	463e      	mov	r6, r7
 800578c:	42be      	cmp	r6, r7
 800578e:	d900      	bls.n	8005792 <__ssputs_r+0x86>
 8005790:	463e      	mov	r6, r7
 8005792:	4632      	mov	r2, r6
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	4641      	mov	r1, r8
 8005798:	f000 fab6 	bl	8005d08 <memmove>
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	1b9b      	subs	r3, r3, r6
 80057a2:	4432      	add	r2, r6
 80057a4:	60a3      	str	r3, [r4, #8]
 80057a6:	6022      	str	r2, [r4, #0]
 80057a8:	2000      	movs	r0, #0
 80057aa:	e7db      	b.n	8005764 <__ssputs_r+0x58>
 80057ac:	462a      	mov	r2, r5
 80057ae:	f000 fb6f 	bl	8005e90 <_realloc_r>
 80057b2:	4606      	mov	r6, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1e1      	bne.n	800577c <__ssputs_r+0x70>
 80057b8:	6921      	ldr	r1, [r4, #16]
 80057ba:	4650      	mov	r0, sl
 80057bc:	f000 fabe 	bl	8005d3c <_free_r>
 80057c0:	e7c7      	b.n	8005752 <__ssputs_r+0x46>
	...

080057c4 <_svfiprintf_r>:
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	4698      	mov	r8, r3
 80057ca:	898b      	ldrh	r3, [r1, #12]
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	b09d      	sub	sp, #116	; 0x74
 80057d0:	4607      	mov	r7, r0
 80057d2:	460d      	mov	r5, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	d50e      	bpl.n	80057f6 <_svfiprintf_r+0x32>
 80057d8:	690b      	ldr	r3, [r1, #16]
 80057da:	b963      	cbnz	r3, 80057f6 <_svfiprintf_r+0x32>
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	f000 fafd 	bl	8005ddc <_malloc_r>
 80057e2:	6028      	str	r0, [r5, #0]
 80057e4:	6128      	str	r0, [r5, #16]
 80057e6:	b920      	cbnz	r0, 80057f2 <_svfiprintf_r+0x2e>
 80057e8:	230c      	movs	r3, #12
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e0d1      	b.n	8005996 <_svfiprintf_r+0x1d2>
 80057f2:	2340      	movs	r3, #64	; 0x40
 80057f4:	616b      	str	r3, [r5, #20]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9309      	str	r3, [sp, #36]	; 0x24
 80057fa:	2320      	movs	r3, #32
 80057fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005800:	f8cd 800c 	str.w	r8, [sp, #12]
 8005804:	2330      	movs	r3, #48	; 0x30
 8005806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059b0 <_svfiprintf_r+0x1ec>
 800580a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800580e:	f04f 0901 	mov.w	r9, #1
 8005812:	4623      	mov	r3, r4
 8005814:	469a      	mov	sl, r3
 8005816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581a:	b10a      	cbz	r2, 8005820 <_svfiprintf_r+0x5c>
 800581c:	2a25      	cmp	r2, #37	; 0x25
 800581e:	d1f9      	bne.n	8005814 <_svfiprintf_r+0x50>
 8005820:	ebba 0b04 	subs.w	fp, sl, r4
 8005824:	d00b      	beq.n	800583e <_svfiprintf_r+0x7a>
 8005826:	465b      	mov	r3, fp
 8005828:	4622      	mov	r2, r4
 800582a:	4629      	mov	r1, r5
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ff6d 	bl	800570c <__ssputs_r>
 8005832:	3001      	adds	r0, #1
 8005834:	f000 80aa 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800583a:	445a      	add	r2, fp
 800583c:	9209      	str	r2, [sp, #36]	; 0x24
 800583e:	f89a 3000 	ldrb.w	r3, [sl]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80a2 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005848:	2300      	movs	r3, #0
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005852:	f10a 0a01 	add.w	sl, sl, #1
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	9307      	str	r3, [sp, #28]
 800585a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800585e:	931a      	str	r3, [sp, #104]	; 0x68
 8005860:	4654      	mov	r4, sl
 8005862:	2205      	movs	r2, #5
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	4851      	ldr	r0, [pc, #324]	; (80059b0 <_svfiprintf_r+0x1ec>)
 800586a:	f7fa fcf1 	bl	8000250 <memchr>
 800586e:	9a04      	ldr	r2, [sp, #16]
 8005870:	b9d8      	cbnz	r0, 80058aa <_svfiprintf_r+0xe6>
 8005872:	06d0      	lsls	r0, r2, #27
 8005874:	bf44      	itt	mi
 8005876:	2320      	movmi	r3, #32
 8005878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587c:	0711      	lsls	r1, r2, #28
 800587e:	bf44      	itt	mi
 8005880:	232b      	movmi	r3, #43	; 0x2b
 8005882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005886:	f89a 3000 	ldrb.w	r3, [sl]
 800588a:	2b2a      	cmp	r3, #42	; 0x2a
 800588c:	d015      	beq.n	80058ba <_svfiprintf_r+0xf6>
 800588e:	9a07      	ldr	r2, [sp, #28]
 8005890:	4654      	mov	r4, sl
 8005892:	2000      	movs	r0, #0
 8005894:	f04f 0c0a 	mov.w	ip, #10
 8005898:	4621      	mov	r1, r4
 800589a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800589e:	3b30      	subs	r3, #48	; 0x30
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	d94e      	bls.n	8005942 <_svfiprintf_r+0x17e>
 80058a4:	b1b0      	cbz	r0, 80058d4 <_svfiprintf_r+0x110>
 80058a6:	9207      	str	r2, [sp, #28]
 80058a8:	e014      	b.n	80058d4 <_svfiprintf_r+0x110>
 80058aa:	eba0 0308 	sub.w	r3, r0, r8
 80058ae:	fa09 f303 	lsl.w	r3, r9, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	46a2      	mov	sl, r4
 80058b8:	e7d2      	b.n	8005860 <_svfiprintf_r+0x9c>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	1d19      	adds	r1, r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9103      	str	r1, [sp, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfbb      	ittet	lt
 80058c6:	425b      	neglt	r3, r3
 80058c8:	f042 0202 	orrlt.w	r2, r2, #2
 80058cc:	9307      	strge	r3, [sp, #28]
 80058ce:	9307      	strlt	r3, [sp, #28]
 80058d0:	bfb8      	it	lt
 80058d2:	9204      	strlt	r2, [sp, #16]
 80058d4:	7823      	ldrb	r3, [r4, #0]
 80058d6:	2b2e      	cmp	r3, #46	; 0x2e
 80058d8:	d10c      	bne.n	80058f4 <_svfiprintf_r+0x130>
 80058da:	7863      	ldrb	r3, [r4, #1]
 80058dc:	2b2a      	cmp	r3, #42	; 0x2a
 80058de:	d135      	bne.n	800594c <_svfiprintf_r+0x188>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	9203      	str	r2, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bfb8      	it	lt
 80058ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f0:	3402      	adds	r4, #2
 80058f2:	9305      	str	r3, [sp, #20]
 80058f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059c0 <_svfiprintf_r+0x1fc>
 80058f8:	7821      	ldrb	r1, [r4, #0]
 80058fa:	2203      	movs	r2, #3
 80058fc:	4650      	mov	r0, sl
 80058fe:	f7fa fca7 	bl	8000250 <memchr>
 8005902:	b140      	cbz	r0, 8005916 <_svfiprintf_r+0x152>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	eba0 000a 	sub.w	r0, r0, sl
 800590a:	fa03 f000 	lsl.w	r0, r3, r0
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	4303      	orrs	r3, r0
 8005912:	3401      	adds	r4, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591a:	4826      	ldr	r0, [pc, #152]	; (80059b4 <_svfiprintf_r+0x1f0>)
 800591c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005920:	2206      	movs	r2, #6
 8005922:	f7fa fc95 	bl	8000250 <memchr>
 8005926:	2800      	cmp	r0, #0
 8005928:	d038      	beq.n	800599c <_svfiprintf_r+0x1d8>
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <_svfiprintf_r+0x1f4>)
 800592c:	bb1b      	cbnz	r3, 8005976 <_svfiprintf_r+0x1b2>
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	3308      	adds	r3, #8
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	4433      	add	r3, r6
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	e767      	b.n	8005812 <_svfiprintf_r+0x4e>
 8005942:	fb0c 3202 	mla	r2, ip, r2, r3
 8005946:	460c      	mov	r4, r1
 8005948:	2001      	movs	r0, #1
 800594a:	e7a5      	b.n	8005898 <_svfiprintf_r+0xd4>
 800594c:	2300      	movs	r3, #0
 800594e:	3401      	adds	r4, #1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4619      	mov	r1, r3
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4620      	mov	r0, r4
 800595a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800595e:	3a30      	subs	r2, #48	; 0x30
 8005960:	2a09      	cmp	r2, #9
 8005962:	d903      	bls.n	800596c <_svfiprintf_r+0x1a8>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0c5      	beq.n	80058f4 <_svfiprintf_r+0x130>
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	e7c3      	b.n	80058f4 <_svfiprintf_r+0x130>
 800596c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005970:	4604      	mov	r4, r0
 8005972:	2301      	movs	r3, #1
 8005974:	e7f0      	b.n	8005958 <_svfiprintf_r+0x194>
 8005976:	ab03      	add	r3, sp, #12
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	462a      	mov	r2, r5
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <_svfiprintf_r+0x1f8>)
 800597e:	a904      	add	r1, sp, #16
 8005980:	4638      	mov	r0, r7
 8005982:	f3af 8000 	nop.w
 8005986:	1c42      	adds	r2, r0, #1
 8005988:	4606      	mov	r6, r0
 800598a:	d1d6      	bne.n	800593a <_svfiprintf_r+0x176>
 800598c:	89ab      	ldrh	r3, [r5, #12]
 800598e:	065b      	lsls	r3, r3, #25
 8005990:	f53f af2c 	bmi.w	80057ec <_svfiprintf_r+0x28>
 8005994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005996:	b01d      	add	sp, #116	; 0x74
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	462a      	mov	r2, r5
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <_svfiprintf_r+0x1f8>)
 80059a4:	a904      	add	r1, sp, #16
 80059a6:	4638      	mov	r0, r7
 80059a8:	f000 f87a 	bl	8005aa0 <_printf_i>
 80059ac:	e7eb      	b.n	8005986 <_svfiprintf_r+0x1c2>
 80059ae:	bf00      	nop
 80059b0:	080061d0 	.word	0x080061d0
 80059b4:	080061da 	.word	0x080061da
 80059b8:	00000000 	.word	0x00000000
 80059bc:	0800570d 	.word	0x0800570d
 80059c0:	080061d6 	.word	0x080061d6

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4699      	mov	r9, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a10:	1e13      	subs	r3, r2, #0
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	68e5      	ldr	r5, [r4, #12]
 8005a2e:	6832      	ldr	r2, [r6, #0]
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	bf08      	it	eq
 8005a38:	1aad      	subeq	r5, r5, r2
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	; 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4691      	mov	r9, r2
 8005aa8:	7e27      	ldrb	r7, [r4, #24]
 8005aaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005aac:	2f78      	cmp	r7, #120	; 0x78
 8005aae:	4680      	mov	r8, r0
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	; 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d8 	beq.w	8005c72 <_printf_i+0x1d2>
 8005ac2:	2f58      	cmp	r7, #88	; 0x58
 8005ac4:	f000 80a3 	beq.w	8005c0e <_printf_i+0x16e>
 8005ac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a001      	add	r0, pc, #4	; (adr r0, 8005ae0 <_printf_i+0x40>)
 8005adc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c59 	.word	0x08005c59
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005c3b 	.word	0x08005c3b
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c7b 	.word	0x08005c7b
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c43 	.word	0x08005c43
 8005b38:	680b      	ldr	r3, [r1, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	600a      	str	r2, [r1, #0]
 8005b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0a3      	b.n	8005c94 <_printf_i+0x1f4>
 8005b4c:	6825      	ldr	r5, [r4, #0]
 8005b4e:	6808      	ldr	r0, [r1, #0]
 8005b50:	062e      	lsls	r6, r5, #24
 8005b52:	f100 0304 	add.w	r3, r0, #4
 8005b56:	d50a      	bpl.n	8005b6e <_printf_i+0xce>
 8005b58:	6805      	ldr	r5, [r0, #0]
 8005b5a:	600b      	str	r3, [r1, #0]
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xc8>
 8005b60:	232d      	movs	r3, #45	; 0x2d
 8005b62:	426d      	negs	r5, r5
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	485e      	ldr	r0, [pc, #376]	; (8005ce4 <_printf_i+0x244>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e019      	b.n	8005ba2 <_printf_i+0x102>
 8005b6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b72:	6805      	ldr	r5, [r0, #0]
 8005b74:	600b      	str	r3, [r1, #0]
 8005b76:	bf18      	it	ne
 8005b78:	b22d      	sxthne	r5, r5
 8005b7a:	e7ef      	b.n	8005b5c <_printf_i+0xbc>
 8005b7c:	680b      	ldr	r3, [r1, #0]
 8005b7e:	6825      	ldr	r5, [r4, #0]
 8005b80:	1d18      	adds	r0, r3, #4
 8005b82:	6008      	str	r0, [r1, #0]
 8005b84:	0628      	lsls	r0, r5, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xec>
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0xf2>
 8005b8c:	0669      	lsls	r1, r5, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xe8>
 8005b90:	881d      	ldrh	r5, [r3, #0]
 8005b92:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <_printf_i+0x244>)
 8005b94:	2f6f      	cmp	r7, #111	; 0x6f
 8005b96:	bf0c      	ite	eq
 8005b98:	2308      	moveq	r3, #8
 8005b9a:	230a      	movne	r3, #10
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ba2:	6866      	ldr	r6, [r4, #4]
 8005ba4:	60a6      	str	r6, [r4, #8]
 8005ba6:	2e00      	cmp	r6, #0
 8005ba8:	bfa2      	ittt	ge
 8005baa:	6821      	ldrge	r1, [r4, #0]
 8005bac:	f021 0104 	bicge.w	r1, r1, #4
 8005bb0:	6021      	strge	r1, [r4, #0]
 8005bb2:	b90d      	cbnz	r5, 8005bb8 <_printf_i+0x118>
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	d04d      	beq.n	8005c54 <_printf_i+0x1b4>
 8005bb8:	4616      	mov	r6, r2
 8005bba:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bbe:	fb03 5711 	mls	r7, r3, r1, r5
 8005bc2:	5dc7      	ldrb	r7, [r0, r7]
 8005bc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bc8:	462f      	mov	r7, r5
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	460d      	mov	r5, r1
 8005bce:	d9f4      	bls.n	8005bba <_printf_i+0x11a>
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d10b      	bne.n	8005bec <_printf_i+0x14c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07df      	lsls	r7, r3, #31
 8005bd8:	d508      	bpl.n	8005bec <_printf_i+0x14c>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6861      	ldr	r1, [r4, #4]
 8005bde:	4299      	cmp	r1, r3
 8005be0:	bfde      	ittt	le
 8005be2:	2330      	movle	r3, #48	; 0x30
 8005be4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005be8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bec:	1b92      	subs	r2, r2, r6
 8005bee:	6122      	str	r2, [r4, #16]
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	aa03      	add	r2, sp, #12
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fee2 	bl	80059c4 <_printf_common>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d14c      	bne.n	8005c9e <_printf_i+0x1fe>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	b004      	add	sp, #16
 8005c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0e:	4835      	ldr	r0, [pc, #212]	; (8005ce4 <_printf_i+0x244>)
 8005c10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	680e      	ldr	r6, [r1, #0]
 8005c18:	061f      	lsls	r7, r3, #24
 8005c1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c1e:	600e      	str	r6, [r1, #0]
 8005c20:	d514      	bpl.n	8005c4c <_printf_i+0x1ac>
 8005c22:	07d9      	lsls	r1, r3, #31
 8005c24:	bf44      	itt	mi
 8005c26:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2a:	6023      	strmi	r3, [r4, #0]
 8005c2c:	b91d      	cbnz	r5, 8005c36 <_printf_i+0x196>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f023 0320 	bic.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	2310      	movs	r3, #16
 8005c38:	e7b0      	b.n	8005b9c <_printf_i+0xfc>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2378      	movs	r3, #120	; 0x78
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <_printf_i+0x248>)
 8005c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4a:	e7e3      	b.n	8005c14 <_printf_i+0x174>
 8005c4c:	065e      	lsls	r6, r3, #25
 8005c4e:	bf48      	it	mi
 8005c50:	b2ad      	uxthmi	r5, r5
 8005c52:	e7e6      	b.n	8005c22 <_printf_i+0x182>
 8005c54:	4616      	mov	r6, r2
 8005c56:	e7bb      	b.n	8005bd0 <_printf_i+0x130>
 8005c58:	680b      	ldr	r3, [r1, #0]
 8005c5a:	6826      	ldr	r6, [r4, #0]
 8005c5c:	6960      	ldr	r0, [r4, #20]
 8005c5e:	1d1d      	adds	r5, r3, #4
 8005c60:	600d      	str	r5, [r1, #0]
 8005c62:	0635      	lsls	r5, r6, #24
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	d501      	bpl.n	8005c6c <_printf_i+0x1cc>
 8005c68:	6018      	str	r0, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <_printf_i+0x1d2>
 8005c6c:	0671      	lsls	r1, r6, #25
 8005c6e:	d5fb      	bpl.n	8005c68 <_printf_i+0x1c8>
 8005c70:	8018      	strh	r0, [r3, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	4616      	mov	r6, r2
 8005c78:	e7ba      	b.n	8005bf0 <_printf_i+0x150>
 8005c7a:	680b      	ldr	r3, [r1, #0]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	600a      	str	r2, [r1, #0]
 8005c80:	681e      	ldr	r6, [r3, #0]
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7fa fae2 	bl	8000250 <memchr>
 8005c8c:	b108      	cbz	r0, 8005c92 <_printf_i+0x1f2>
 8005c8e:	1b80      	subs	r0, r0, r6
 8005c90:	6060      	str	r0, [r4, #4]
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	2300      	movs	r3, #0
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	e7a8      	b.n	8005bf0 <_printf_i+0x150>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d0ab      	beq.n	8005c04 <_printf_i+0x164>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	079b      	lsls	r3, r3, #30
 8005cb0:	d413      	bmi.n	8005cda <_printf_i+0x23a>
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bfb8      	it	lt
 8005cba:	4618      	movlt	r0, r3
 8005cbc:	e7a4      	b.n	8005c08 <_printf_i+0x168>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	47d0      	blx	sl
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d09b      	beq.n	8005c04 <_printf_i+0x164>
 8005ccc:	3501      	adds	r5, #1
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	9903      	ldr	r1, [sp, #12]
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dcf2      	bgt.n	8005cbe <_printf_i+0x21e>
 8005cd8:	e7eb      	b.n	8005cb2 <_printf_i+0x212>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	f104 0619 	add.w	r6, r4, #25
 8005ce0:	e7f5      	b.n	8005cce <_printf_i+0x22e>
 8005ce2:	bf00      	nop
 8005ce4:	080061e1 	.word	0x080061e1
 8005ce8:	080061f2 	.word	0x080061f2

08005cec <memcpy>:
 8005cec:	440a      	add	r2, r1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cf4:	d100      	bne.n	8005cf8 <memcpy+0xc>
 8005cf6:	4770      	bx	lr
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d02:	4291      	cmp	r1, r2
 8005d04:	d1f9      	bne.n	8005cfa <memcpy+0xe>
 8005d06:	bd10      	pop	{r4, pc}

08005d08 <memmove>:
 8005d08:	4288      	cmp	r0, r1
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	eb01 0402 	add.w	r4, r1, r2
 8005d10:	d902      	bls.n	8005d18 <memmove+0x10>
 8005d12:	4284      	cmp	r4, r0
 8005d14:	4623      	mov	r3, r4
 8005d16:	d807      	bhi.n	8005d28 <memmove+0x20>
 8005d18:	1e43      	subs	r3, r0, #1
 8005d1a:	42a1      	cmp	r1, r4
 8005d1c:	d008      	beq.n	8005d30 <memmove+0x28>
 8005d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d26:	e7f8      	b.n	8005d1a <memmove+0x12>
 8005d28:	4402      	add	r2, r0
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	d100      	bne.n	8005d32 <memmove+0x2a>
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d3a:	e7f7      	b.n	8005d2c <memmove+0x24>

08005d3c <_free_r>:
 8005d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d048      	beq.n	8005dd4 <_free_r+0x98>
 8005d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d46:	9001      	str	r0, [sp, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d4e:	bfb8      	it	lt
 8005d50:	18e4      	addlt	r4, r4, r3
 8005d52:	f000 f8d3 	bl	8005efc <__malloc_lock>
 8005d56:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <_free_r+0x9c>)
 8005d58:	9801      	ldr	r0, [sp, #4]
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	b933      	cbnz	r3, 8005d6e <_free_r+0x32>
 8005d60:	6063      	str	r3, [r4, #4]
 8005d62:	6014      	str	r4, [r2, #0]
 8005d64:	b003      	add	sp, #12
 8005d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d6a:	f000 b8cd 	b.w	8005f08 <__malloc_unlock>
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	d90b      	bls.n	8005d8a <_free_r+0x4e>
 8005d72:	6821      	ldr	r1, [r4, #0]
 8005d74:	1862      	adds	r2, r4, r1
 8005d76:	4293      	cmp	r3, r2
 8005d78:	bf04      	itt	eq
 8005d7a:	681a      	ldreq	r2, [r3, #0]
 8005d7c:	685b      	ldreq	r3, [r3, #4]
 8005d7e:	6063      	str	r3, [r4, #4]
 8005d80:	bf04      	itt	eq
 8005d82:	1852      	addeq	r2, r2, r1
 8005d84:	6022      	streq	r2, [r4, #0]
 8005d86:	602c      	str	r4, [r5, #0]
 8005d88:	e7ec      	b.n	8005d64 <_free_r+0x28>
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	b10b      	cbz	r3, 8005d94 <_free_r+0x58>
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d9fa      	bls.n	8005d8a <_free_r+0x4e>
 8005d94:	6811      	ldr	r1, [r2, #0]
 8005d96:	1855      	adds	r5, r2, r1
 8005d98:	42a5      	cmp	r5, r4
 8005d9a:	d10b      	bne.n	8005db4 <_free_r+0x78>
 8005d9c:	6824      	ldr	r4, [r4, #0]
 8005d9e:	4421      	add	r1, r4
 8005da0:	1854      	adds	r4, r2, r1
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	6011      	str	r1, [r2, #0]
 8005da6:	d1dd      	bne.n	8005d64 <_free_r+0x28>
 8005da8:	681c      	ldr	r4, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	6053      	str	r3, [r2, #4]
 8005dae:	4421      	add	r1, r4
 8005db0:	6011      	str	r1, [r2, #0]
 8005db2:	e7d7      	b.n	8005d64 <_free_r+0x28>
 8005db4:	d902      	bls.n	8005dbc <_free_r+0x80>
 8005db6:	230c      	movs	r3, #12
 8005db8:	6003      	str	r3, [r0, #0]
 8005dba:	e7d3      	b.n	8005d64 <_free_r+0x28>
 8005dbc:	6825      	ldr	r5, [r4, #0]
 8005dbe:	1961      	adds	r1, r4, r5
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	bf04      	itt	eq
 8005dc4:	6819      	ldreq	r1, [r3, #0]
 8005dc6:	685b      	ldreq	r3, [r3, #4]
 8005dc8:	6063      	str	r3, [r4, #4]
 8005dca:	bf04      	itt	eq
 8005dcc:	1949      	addeq	r1, r1, r5
 8005dce:	6021      	streq	r1, [r4, #0]
 8005dd0:	6054      	str	r4, [r2, #4]
 8005dd2:	e7c7      	b.n	8005d64 <_free_r+0x28>
 8005dd4:	b003      	add	sp, #12
 8005dd6:	bd30      	pop	{r4, r5, pc}
 8005dd8:	200001e0 	.word	0x200001e0

08005ddc <_malloc_r>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	1ccd      	adds	r5, r1, #3
 8005de0:	f025 0503 	bic.w	r5, r5, #3
 8005de4:	3508      	adds	r5, #8
 8005de6:	2d0c      	cmp	r5, #12
 8005de8:	bf38      	it	cc
 8005dea:	250c      	movcc	r5, #12
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	4606      	mov	r6, r0
 8005df0:	db01      	blt.n	8005df6 <_malloc_r+0x1a>
 8005df2:	42a9      	cmp	r1, r5
 8005df4:	d903      	bls.n	8005dfe <_malloc_r+0x22>
 8005df6:	230c      	movs	r3, #12
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfe:	f000 f87d 	bl	8005efc <__malloc_lock>
 8005e02:	4921      	ldr	r1, [pc, #132]	; (8005e88 <_malloc_r+0xac>)
 8005e04:	680a      	ldr	r2, [r1, #0]
 8005e06:	4614      	mov	r4, r2
 8005e08:	b99c      	cbnz	r4, 8005e32 <_malloc_r+0x56>
 8005e0a:	4f20      	ldr	r7, [pc, #128]	; (8005e8c <_malloc_r+0xb0>)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	b923      	cbnz	r3, 8005e1a <_malloc_r+0x3e>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4630      	mov	r0, r6
 8005e14:	f000 f862 	bl	8005edc <_sbrk_r>
 8005e18:	6038      	str	r0, [r7, #0]
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f000 f85d 	bl	8005edc <_sbrk_r>
 8005e22:	1c43      	adds	r3, r0, #1
 8005e24:	d123      	bne.n	8005e6e <_malloc_r+0x92>
 8005e26:	230c      	movs	r3, #12
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f000 f86c 	bl	8005f08 <__malloc_unlock>
 8005e30:	e7e3      	b.n	8005dfa <_malloc_r+0x1e>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	1b5b      	subs	r3, r3, r5
 8005e36:	d417      	bmi.n	8005e68 <_malloc_r+0x8c>
 8005e38:	2b0b      	cmp	r3, #11
 8005e3a:	d903      	bls.n	8005e44 <_malloc_r+0x68>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	441c      	add	r4, r3
 8005e40:	6025      	str	r5, [r4, #0]
 8005e42:	e004      	b.n	8005e4e <_malloc_r+0x72>
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	42a2      	cmp	r2, r4
 8005e48:	bf0c      	ite	eq
 8005e4a:	600b      	streq	r3, [r1, #0]
 8005e4c:	6053      	strne	r3, [r2, #4]
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f000 f85a 	bl	8005f08 <__malloc_unlock>
 8005e54:	f104 000b 	add.w	r0, r4, #11
 8005e58:	1d23      	adds	r3, r4, #4
 8005e5a:	f020 0007 	bic.w	r0, r0, #7
 8005e5e:	1ac2      	subs	r2, r0, r3
 8005e60:	d0cc      	beq.n	8005dfc <_malloc_r+0x20>
 8005e62:	1a1b      	subs	r3, r3, r0
 8005e64:	50a3      	str	r3, [r4, r2]
 8005e66:	e7c9      	b.n	8005dfc <_malloc_r+0x20>
 8005e68:	4622      	mov	r2, r4
 8005e6a:	6864      	ldr	r4, [r4, #4]
 8005e6c:	e7cc      	b.n	8005e08 <_malloc_r+0x2c>
 8005e6e:	1cc4      	adds	r4, r0, #3
 8005e70:	f024 0403 	bic.w	r4, r4, #3
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	d0e3      	beq.n	8005e40 <_malloc_r+0x64>
 8005e78:	1a21      	subs	r1, r4, r0
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 f82e 	bl	8005edc <_sbrk_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d1dd      	bne.n	8005e40 <_malloc_r+0x64>
 8005e84:	e7cf      	b.n	8005e26 <_malloc_r+0x4a>
 8005e86:	bf00      	nop
 8005e88:	200001e0 	.word	0x200001e0
 8005e8c:	200001e4 	.word	0x200001e4

08005e90 <_realloc_r>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	4607      	mov	r7, r0
 8005e94:	4614      	mov	r4, r2
 8005e96:	460e      	mov	r6, r1
 8005e98:	b921      	cbnz	r1, 8005ea4 <_realloc_r+0x14>
 8005e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	f7ff bf9c 	b.w	8005ddc <_malloc_r>
 8005ea4:	b922      	cbnz	r2, 8005eb0 <_realloc_r+0x20>
 8005ea6:	f7ff ff49 	bl	8005d3c <_free_r>
 8005eaa:	4625      	mov	r5, r4
 8005eac:	4628      	mov	r0, r5
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb0:	f000 f830 	bl	8005f14 <_malloc_usable_size_r>
 8005eb4:	42a0      	cmp	r0, r4
 8005eb6:	d20f      	bcs.n	8005ed8 <_realloc_r+0x48>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f7ff ff8e 	bl	8005ddc <_malloc_r>
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0f2      	beq.n	8005eac <_realloc_r+0x1c>
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4622      	mov	r2, r4
 8005eca:	f7ff ff0f 	bl	8005cec <memcpy>
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f7ff ff33 	bl	8005d3c <_free_r>
 8005ed6:	e7e9      	b.n	8005eac <_realloc_r+0x1c>
 8005ed8:	4635      	mov	r5, r6
 8005eda:	e7e7      	b.n	8005eac <_realloc_r+0x1c>

08005edc <_sbrk_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_sbrk_r+0x1c>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	f7fa fe30 	bl	8000b4c <_sbrk>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_sbrk_r+0x1a>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_sbrk_r+0x1a>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	200006c0 	.word	0x200006c0

08005efc <__malloc_lock>:
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <__malloc_lock+0x8>)
 8005efe:	f000 b811 	b.w	8005f24 <__retarget_lock_acquire_recursive>
 8005f02:	bf00      	nop
 8005f04:	200006c8 	.word	0x200006c8

08005f08 <__malloc_unlock>:
 8005f08:	4801      	ldr	r0, [pc, #4]	; (8005f10 <__malloc_unlock+0x8>)
 8005f0a:	f000 b80c 	b.w	8005f26 <__retarget_lock_release_recursive>
 8005f0e:	bf00      	nop
 8005f10:	200006c8 	.word	0x200006c8

08005f14 <_malloc_usable_size_r>:
 8005f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f18:	1f18      	subs	r0, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfbc      	itt	lt
 8005f1e:	580b      	ldrlt	r3, [r1, r0]
 8005f20:	18c0      	addlt	r0, r0, r3
 8005f22:	4770      	bx	lr

08005f24 <__retarget_lock_acquire_recursive>:
 8005f24:	4770      	bx	lr

08005f26 <__retarget_lock_release_recursive>:
 8005f26:	4770      	bx	lr

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
